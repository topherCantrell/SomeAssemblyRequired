Defines:
CPU   = Z80
S_10D = 0x30
S_10U = 0x80
S_1D  = 0x20
S_1U  = 0x40
S_HIA = 0xA0
S_HIB = 0x90
S_LOA = 0x20
S_LOB = 0x08
S_WA  = 0x40
S_WB  = 0x48

Address defines:
1000 = MyNumber
1002 = again
1001 = another
0010 = test1
0011 = test2
0012 = test3

Code labels:
018C = debWait
017B = inp10U
015B = inp1D
016A = inp1U
0157 = inpLGood
0122 = input00to99
0032 = playGame
01B8 = segSprite
0102 = show00to99
0105 = showA
0110 = showB
00FB = showBlank
00E9 = showHi
00F2 = showLo
007B = showWin
0010 = splash
01A8 = waitAnyButton
00AD = waitButtonTime
0198 = waitNoButton
00CB = waitTime
00AF = wkt1
00CD = wkt11


; Assemble the Z80 to binary
;@build tools.assembler.Assembler test.asm test.bin -list

; Create a SPIN file with the binary embedded
;@build tools.propeller.BinToSpin test.bin data.spin

; Start the new code running on the propeller
;@build tools.propeller.RunNewCode test.bin

define CPU = Z80


define S_1D =  0x20
define S_1U =  0x40
define S_10D = 0x30
define S_10U = 0x80
define S_HIA = 0xA0
define S_HIB = 0x90
define S_LOA = 0x20
define S_LOB = 0x08

define S_WA = 0x40
define S_WB = 0x48

; Hardware ports:
;   0 (output only) Left digit: hgfedcba 
;   1 (output only) Right digit:  hgfedcba  
;   2 (output onlu) Frequency 00-off FF-high
;   3 (input only)  Switches:      ---54321  (CCW from bottom right)

; The memory map is 8K (0000-1FFF) RAM with the program loaded automatically
; starting at 0000.
;
; 0000-0FFF Program
; 1000-1FFF RAM (stack and variables)

address MyNumber = 0x1000 byte
address another = * byte
address again = * word
address test1 = >0x10 byte
address test2 = * byte
address test3 = * word

   
   ;There are rules you must know. port[x] ... x can only be a number or C. After the = can only be A. There are outd helpers.
   ; Talk about the problems here ... remembering that this mangles A. Compiler keeps up
   ; with it and knows that the second instruction has the same A (255).
   ; Must know the stack builds by decrement and decrements first
   
   ; TODO color nnnnnn()
   ;      color mem[xxxx] and port[xxxx]
   ;      add GOTO and RETURN to keywords
  
0000: ; Z80 starts up at location 0000

0000: 31 00 20   SP = 0x2000         ; Initialize the stack to the end of RAM
     
__Blend_o_1_pass:             ; Blended
0003: CD 10 00   splash()             ; Splash mode attracts the player to the game
    
0006: 79         A = C                ; Copy randomized C ...
0007: 32 00 10   MyNumber = A         ; ... to computer's number
      ; mem[MyNumber] = C
      
000A: CD 32 00   playGame()           ; Play a game
;  } while(true)
000D: C3 03 00   JP __Blend_o_1_pass           ; (1) true
     
; ----------------------------------------------------------------------------
; This function flashes Hi/Lo on the display and waits for the player to press
; any button to start a game. Througout the splash routine the C register is
; randomized from 00 to 99. The exact value depends on how long the player takes
; to press a button.
;   @return C a random value from 00 to 99
;           
splash:

0010: 3E 00      A = 0                ; Stop ...
0012: D3 02      port[2] = A          ; ... any sounds

0014: CD 98 01   waitNoButton()       ; Wait for all buttons up
     
__Blend_o_2_pass:             ; Blended

0017: CD E9 00   showHi()             ; Show "Hi"
001A: 26 80      H = 0x80             ; Wait for button or ...
001C: CD AD 00   waitButtonTime()     ; ... timeout (randomizes C)
;    if(NOT_ZERO) {
001F: CA 23 00   JP Z,__Blend_i_3_fail         ; (1) NOT_ZERO
0022: C9         return             ; Button pressed ... end of splash
;    }
__Blend_i_3_fail:             ; Blended
      
0023: CD F2 00   showLo()             ; Show "Lo"
0026: 26 00      H  = 0               ; Wait for button or ...
0028: CD AD 00   waitButtonTime()     ; ... timeout (randomizes C)
;    if(NOT_ZERO) {
002B: CA 2F 00   JP Z,__Blend_i_4_fail         ; (1) NOT_ZERO
002E: C9         return             ; Button pressed ... end of splash
;    }
__Blend_i_4_fail:             ; Blended
   
;  } while(true)
002F: C3 17 00   JP __Blend_o_2_pass           ; (1) true
   
; ----------------------------------------------------------------------------   
; This function plays a game of Hi/Lo. When the user guesses the number the
; display flashes and the player must press any key to exit.
;   @param (MyNumber) memory contains the number the computer is thinking of  
; 
playGame:
   
0032: 1E 00      LD    E,0            ; Start player guessing at 00
      
__Blend_o_5_pass:             ; Blended
0034: CD 22 01   input00to99()        ; Get a number from the player
0037: 3A 00 10   LD    A,(MyNumber)   ; Compare computer number to guess
   
;    if(A==E) {        
003A: BB         CP E                          ; (1) A==E
003B: C2 42 00   JP NZ,__Blend_i_6_fail        ; (2) A==E
003E: CD 7B 00   showWin()            ; Flash the winning indicator
0041: C9         return               ; Done with game
;    }
__Blend_i_6_fail:             ; Blended
   
;    if(A<E) {
0042: BB         CP E                          ; (1) A<E
0043: D2 50 00   JP NC,__Blend_i_7_fail        ; (2) A<E
0046: CD F2 00   showLo()             ; Show "Lo" as in "Lower"
0049: 06 20      LD    B,S_LOA        ; "Lower" ...
004B: 0E 08      LD    C,S_LOB        ; ... tones
004D: C3 57 00   JP __Blend_i_7_end            ; Blended
;    } else {      
__Blend_i_7_fail:             ; Blended
0050: CD E9 00   showHi()             ; Show "Hi" as in "Higher"
0053: 06 A0      LD    B,S_HIA        ; "Higher" ...
0055: 0E 90      LD    C,S_HIB        ; ... tones
;    }
__Blend_i_7_end:              ; Blended
   
0057: 26 10      LD    H,0x10           ; 16 passes in sound loop
__Blend_o_8_pass:             ; Blended
0059: 78         LD    A,B            ; Play ...
005A: D3 02      OUT   (2),A          ; ... first tone
005C: CD 8C 01   debWait()            ; Short ...
005F: CD 8C 01   debWait()            ; ... pause
0062: 79         LD    A,C            ; Play ...
0063: D3 02      OUT   (2),A          ; ... second tone
0065: CD 8C 01   debWait()            ; Short ...
0068: CD 8C 01   debWait()            ; ... pause
006B: 25         DEC   H              ; All done?
;    } while(NOT_ZERO)  
006C: C2 59 00   JP NZ,__Blend_o_8_pass        ; (1) NOT_ZERO
    
006F: 3E 00      LD    A,0            ; Turn off ...
0071: D3 02      OUT   (2),A          ; ... sound
    
0073: 26 80      LD    H,0x80         ; Wait for button or ...
0075: CD AD 00   waitButtonTime()     ; ... timeout
   
;  } while(true)
0078: C3 34 00   JP __Blend_o_5_pass           ; (1) true
   

; This function flashes the winning number and plays a winning
; sound.
;   
showWin:

007B: CD FB 00   showBlank()          ; Blank the screen
007E: 3E 40      LD    A,S_WA         ; Play first ...
0080: D3 02      OUT   (2),A          ; ... win tone for ...
0082: 26 20      LD    H,0x20         ; ... for a ...
0084: CD CB 00   waitTime()           ; ... short time

__Blend_o_9_pass:             ; Blended
  
0087: 3A 00 10   LD    A,(MyNumber)   ; Show the ...
008A: CD 02 01   show00to99()         ; ... winning number ...
008D: 3E 48      LD    A,S_WB         ; Play second ...
008F: D3 02      OUT   (2),A          ; ... win tone
0091: 26 20      LD    H,0x20         ; ... for a ...
0093: CD AD 00   waitButtonTime()     ; ... short time
;    if(NOT_ZERO) {
0096: CA 9A 00   JP Z,__Blend_i_10_fail        ; (1) NOT_ZERO
0099: C9         return             ; Return if any button
;    }   
__Blend_i_10_fail:            ; Blended
     
009A: CD FB 00   showBlank()          ; Blank the screen
009D: 3E 40      LD    A,S_WA         ; Play first ...
009F: D3 02      OUT   (2),A          ; ... win tone
00A1: 26 20      LD    H,0x20         ; ... screen for ...
00A3: CD AD 00   waitButtonTime()     ; ... a short time
;    if(NOT_ZERO) {
00A6: CA AA 00   JP Z,__Blend_i_11_fail        ; (1) NOT_ZERO
00A9: C9         return             ; Return if any button
;    }    
__Blend_i_11_fail:            ; Blended
     
;  } while(true)
00AA: C3 87 00   JP __Blend_o_9_pass           ; (1) true
   
; -----------------------TODO TO HERE ----------------------------------------------------- 
  
; This function waits for a button or a timeout, whichever comes first.
; The C register is incremented each pass through the loop. Thus it becomes
; a random number based on the user's time to press a button.
;   @param H time loop value 
;   @return A is the key value (or 0 if none). The Z flag is set accordingly.   
;
waitButtonTime:
00AD: 2E 00      LD    L,0            ; LSB of long-counter to max decrement
wkt1:
00AF: 0C         INC   C              ; Randomize C
00B0: 79         LD    A,C            ; Keep C between 00 and 99
   
;   if(A>99) {
00B1: FE 63      CP 99                         ; (1) A>99
00B3: CA BB 00   JP Z,__Blend_i_12_fail        ; (2) A>99
00B6: DA BB 00   JP C,__Blend_i_12_fail        ; (3) A>99
00B9: 0E 00      LD C,0             ; Over 99, wrap to 0
;   }
__Blend_i_12_fail:            ; Blended
      
00BB: DB 03      IN    A,(3)          ; Read the switches
00BD: EE 1F      XOR   0x1F           ; Remember ... they are active low
00BF: E6 1F      AND   0x1F           ; Only keep the switch bits
00C1: C0         RET   NZ             ; Something is pressed ... abort the count
00C2: 2D         DEC   L              ; Count down the ...
00C3: C2 AF 00   JP    NZ,wkt1        ; ... LSB of the delay value
00C6: 25         DEC   H              ; Count down the ...
00C7: C2 AF 00   JP    NZ,wkt1        ; ... MSB of the delay value
00CA: C9         RET                  ; Done
   
waitTime:
00CB: 2E 00      LD    L,0            ; LSB of long-counter to max decrement
wkt11:
00CD: 0C         INC   C              ; Randomize C
00CE: 79         LD    A,C            ; Keep C between 00 and 99
   
;   if(A>99) {
00CF: FE 63      CP 99                         ; (1) A>99
00D1: CA D9 00   JP Z,__Blend_i_13_fail        ; (2) A>99
00D4: DA D9 00   JP C,__Blend_i_13_fail        ; (3) A>99
00D7: 0E 00      LD C,0             ; Over 99, wrap to 0
;   }
__Blend_i_13_fail:            ; Blended
      
00D9: DB 03      IN    A,(3)          ; Read the switches
00DB: EE 1F      XOR   0x1F           ; Remember ... they are active low
00DD: E6 1F      AND   0x1F           ; Only keep the switch bits
00DF: 00         NOP                  ; This is where the abort would be
00E0: 2D         DEC   L              ; Count down the ...
00E1: C2 CD 00   JP    NZ,wkt11       ; ... LSB of the delay value
00E4: 25         DEC   H              ; Count down the ...
00E5: C2 CD 00   JP    NZ,wkt11       ; ... MSB of the delay value
00E8: C9         RET                  ; Done

; This function shows "Hi" on the display.
;   
showHi:
00E9: 3E 76      LD    A,0x76         ; Pattern ...
00EB: D3 00      OUT   (0),A          ; ... for H
00ED: 3E 10      LD    A,0x10         ; Pattern ...
00EF: D3 01      OUT   (1),A          ; ... for i
00F1: C9         RET                  ; Done

; This function shows "Lo" on the display.
;
showLo:
00F2: 3E 38      LD    A,0x38         ; Pattern ...
00F4: D3 00      OUT   (0),A          ; ... for L
00F6: 3E 5C      LD    A,0x5C         ; Pattern ...
00F8: D3 01      OUT   (1),A          ; ... for o
00FA: C9         RET                  ; Done
 
; This function blanks the display.
;  
showBlank:
00FB: 3E 00      LD    A,0            ; Turn off ...
00FD: D3 00      OUT   (0),A          ; ... all ...
00FF: D3 01      OUT   (1),A          ; ... segments
0101: C9         RET                  ; Done

; This function displays a decimal number 0 to 99 on the
; two digit 7 segment display
;  @param A is the number to show
; 
show00to99:
0102: 11 00 00   LD    DE,0          ; Count the number of 10s to DE
showA:
0105: FE 0A      CP    10            ; Result less than 10?
0107: DA 10 01   JP    C,showB       ; Yes ... we have the digits separated
010A: 1C         INC   E             ; Bump the 10's digit
010B: D6 0A      SUB   10            ; Take off the 10
010D: C3 05 01   JP    showA         ; Keep counting
showB:
0110: 06 00      LD    B,0           ; Count of 1s ...
0112: 4F         LD    C,A           ; ... to BC
0113: 21 B8 01   LD    HL,segSprite  ; Start of sprite table
0116: 19         ADD   HL,DE         ; Point to the correct sprite
0117: 7E         LD    A,(HL)        ; Get the pattern
0118: D3 00      OUT   (0),A         ; Write the left digit
011A: 21 B8 01   LD    HL,segSprite  ; Start of sprite table
011D: 09         ADD   HL,BC         ; Point to the correct sprite
011E: 7E         LD    A,(HL)        ; Get the pattern
011F: D3 01      OUT   (1),A         ; Write the right digit
0121: C9         RET                 ; Done

; This function interacts with the user to enter a number
; from 00 to 99.
;  @param E the initial value to edit from
;  @return E the entered value
;
input00to99:

; Show the value 
0122: D5         PUSH  DE            ; Hold the value
0123: 7B         LD    A,E           ; Show the ...
0124: CD 02 01   show00to99()        ; ... starting point
0127: D1         POP   DE            ; E now has the edit value again
    
; Wait for no-button
0128: CD 98 01   waitNoButton()      ; Wait for all buttons to lift
    
; Turn off sounds
012B: 3E 00      LD    A,0           ; Turn off any ...
012D: D3 02      OUT   (2),A         ; ... sounds
        
; Wait for any switch
012F: CD A8 01   waitAnyButton()     ; Wait for a button press
0132: 47         LD    B,A           ; Will need this for several tests
    
; If ENTER then return
0133: E6 08      AND   0x08          ; ENTER pressed?
;    if(NOT_ZERO) {
0135: CA 39 01   JP Z,__Blend_i_14_fail        ; (1) NOT_ZERO
0138: C9         return            ; Yes ... done
;    }
__Blend_i_14_fail:            ; Blended
    
; Handle Up/Down on Left/Right digits    
0139: 78         LD    A,B           ; Original input
013A: E6 01      AND   0x01          ; 1s down?
013C: C2 5B 01   JP    NZ,inp1D      ; Yes ... go subtract 1
    
013F: 78         LD    A,B           ; Original input
0140: E6 02      AND   0x02          ; 1s up?
0142: C2 6A 01   JP    NZ,inp1U      ; Yes ... go add 1
    
0145: 78         LD    A,B           ; Original input
0146: E6 04      AND   0x04          ; 10s up?
0148: C2 7B 01   JP    NZ,inp10U     ; Yes ... go add 10
    
    ; Must be 10s-down    
014B: 3E 30      LD    A,S_10D       ; Start ...
014D: D3 02      OUT   (2),A         ; ... sound
014F: 7B         LD    A,E           ; Value being edited
0150: D6 0A      SUB   10            ; Subtract 10 (left digit down)
0152: D2 57 01   JP    NC,inpLGood   ; Still in limits
0155: D6 9C      SUB   156           ; Wrap around to 90s (example 5-10 = 251-156 = 95)
inpLGood:
0157: 5F         LD    E,A           ; Store edited value back to E
0158: C3 22 01   JP    input00to99   ; Back to the top
    
inp1D:
015B: 3E 20      LD    A,S_1D        ; Start ...
015D: D3 02      OUT   (2),A         ; ... sound
015F: 7B         LD    A,E           ; Value being edited
0160: D6 01      SUB   1             ; Subtract 1 (right digit down)
0162: D2 57 01   JP    NC,inpLGood   ; No overflow ... keep it
0165: 3E 63      LD    A,99          ; 0 underflows to 99
0167: C3 57 01   JP    inpLGood      ; Store and keep going
inp1U:
016A: 3E 40      LD    A,S_1U        ; Start ...
016C: D3 02      OUT   (2),A         ; ... sound
016E: 7B         LD    A,E           ; Value being edited
016F: C6 01      ADD   A,1           ; Add 1 (right digit up)
0171: FE 64      CP    100           ; Overflowed above 99?
0173: C2 57 01   JP    NZ,inpLGood   ; No ... keep it
0176: 3E 00      LD    A,0           ; 99 overflows to 0
0178: C3 57 01   JP    inpLGood      ; Store and keep going
inp10U:
017B: 3E 80      LD    A,S_10U       ; Start ...
017D: D3 02      OUT   (2),A         ; ... sound
017F: 7B         LD    A,E           ; Value being edited
0180: C6 0A      ADD   A,10          ; Add 10 (left digit up)
0182: FE 64      CP    100           ; Overflow above 99?
0184: DA 57 01   JP    C,inpLGood    ; No ... keep it
0187: D6 64      SUB   100           ; Wrap around to the 0s (example 95+10 = 105-100 = 5)
0189: C3 57 01   JP    inpLGood      ; Store and keep going
   
; This function is a short delay loop allowing a change in switches
; to de-bounce
; 
debWait:
018C: F5         PUSH  AF              ; Hold value in A
018D: 3E 00      LD    A,0             ; Start with 0
__Blend_o_15_pass:            ; Blended
018F: 00         NOP                 ; Kill ...
0190: 00         NOP                 ; ... time
0191: D6 01      SUB   1             ; Count down
;  } while(NOT_ZERO)
0193: C2 8F 01   JP NZ,__Blend_o_15_pass       ; (1) NOT_ZERO
0196: F1         POP   AF              ; Restore value in A
0197: C9         return
  
; Discuss this traditional alternate form
; A = 0
; do {
;  A = A - 1
; } while(A!=0)
; return
    
; This function waits for all switches to open and then
; pauses for debounce
;
waitNoButton:   
__Blend_o_16_pass:            ; Blended
0198: DB 03      IN    A,(3)         ; Read the switches
019A: EE 1F      XOR   0x1F          ; Compliment ...
019C: E6 1F      AND   0x1F          ; ... mask and test
;    if(ZERO) {
019E: C2 A5 01   JP NZ,__Blend_i_17_fail       ; (1) ZERO
01A1: CD 8C 01   debWait()         ; Debounce the change
01A4: C9         return            ; Done
;    }    
__Blend_i_17_fail:            ; Blended
;  } while(true)
01A5: C3 98 01   JP __Blend_o_16_pass          ; (1) true
  
; This function waits for any button to close and then
; pauses for debounce. The switch value is returned in A.
;
waitAnyButton:
__Blend_o_18_pass:            ; Blended
01A8: DB 03      IN    A,(3)         ; Read the switches
01AA: EE 1F      XOR   0x1F          ; Compliment ...
01AC: E6 1F      AND   0x1F          ; ... mask and test
;    if(NOT_ZERO) {
01AE: CA B5 01   JP Z,__Blend_i_19_fail        ; (1) NOT_ZERO
01B1: CD 8C 01   debWait()         ; Debounce the change
01B4: C9         return            ; Done
;    }    
__Blend_i_19_fail:            ; Blended
;  } while(true)
01B5: C3 A8 01   JP __Blend_o_18_pass          ; (1) true

 
; 7-segment display information on the wiki:
; http://en.wikipedia.org/wiki/Seven-segment_display

; The segment bits are connected in this order: hgfedcba
;
;      a
;    +---+
;  f | g | b
;    +---+
;  e |   | c
;    +---+
;      d    . h

; Patterns for numbers (0-9) and hex (A-F)
segSprite:
01B8: 3F 06 5B 4F 66 6D 7D 07 # 0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07
01C0: 7F 6F 77 7C 39 5E 79 71 # 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71

