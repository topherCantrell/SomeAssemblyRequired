; Binary size is 14625 bytes.
; Loaded into memory at 0x0600
; Executed at 0x0600


; $65 bytes starting at 01B0
; LeftTillMORE  01B0
; GrammarType   01E9
; Noun          01E7
; Verb          01E8
; RndCount      01EB
; LastPrinted   0207
; ... 0214


;##Start
0600: 10 CE 03 FF     LDS   #$03FF        ; Stack

0604: 8E 01 B1        LDX   #$01B1        ; Temporaries (not 1B0 ... interesting)
0607: C6 64           LDB   #$64          ; 0x64 bytes
0609: 6F 80           CLR   ,X+           ; clear ...
060B: 5A              DECB                ; ... the ...
060C: 26 FB           BNE   $0609         ; ... temporaries

060E: 4F              CLRA
060F: 8E 04 00        LDX   #$0400        ; Start of screen
0612: CE 60 60        LDU   #$6060        ; Space - Space
0615: EF 81           STU   ,X++          ; Clear ...
0617: 4A              DECA                ; ... the ...
0618: 26 FB           BNE   $0615         ; ... screen

061A: 8E 05 E0        LDX   #$05E0        ; Cursor ...
061D: 9F 88           STX   $88           ; ... position
061F: 86 0D           LDA   #$0D          ; Scroll ...
0621: B7 01 B0        STA   LeftTillMORE  ; (01B0) ... count
0624: 8E 10 21        LDX   #$1021        ; "WELCOME TO PYRAMID!!"
0627: BD 08 FC        JSR   $08FC         ; Print message
062A: BD 09 37        JSR   $0937         ; wait for key
062D: 86 01           LDA   #$01          ; Starting ...
062F: B7 18 E5        STA   RoomNumber    ; (18E5) ... room number
0632: BD 0B D2        JSR   $0BD2         ; Print room description

;##MainLoop
; Main game loop
;
0635: 7F 01 E7        CLR   Noun         ; (01E7) Clear noun (object within reach)
0638: 7F 01 E8        CLR   Verb         ; (01E8) Clear verb (thorw, north, rub, etc)
063B: 7F 01 E9        CLR   $01E9         ; Grammar type (verb, verb+nounInReach, verb+nounInPack)
063E: BD 06 F5        JSR   $06F5         ; Get user input and parse
0641: B6 18 E5        LDA   RoomNumber    ; (18E5) Current room
0644: 8E 11 2E        LDX   #$112E        ; Room descriptors
0647: BD 06 85        JSR   $0685         ; X = X + (A-1)*4
064A: 30 02           LEAX  +$02,X        ; Command-script ...
064C: AE 84           LDX   ,X            ; ... to X
064E: BD 06 9D        JSR   $069D         ; Process the command script for the room
0651: 26 0E           BNE   $0661         ; The room handled it ... move on
0653: 8E 19 45        LDX   #$1945        ; Generic command script
0656: BD 06 9D        JSR   $069D         ; Process the input
0659: 26 06           BNE   $0661         ; It was handled ... move on
065B: 8E 33 87        LDX   #$3387        ; "I DON'T KNOW HOW TO APPLY THAT WORD HERE."
065E: BD 08 D6        JSR   $08D6         ; Print message
0661: BD 0A 51        JSR   $0A51         ; Do this stuff after every step
0664: 20 CF           BRA   $0635         ; Back to top of loop

;##GetObjectInfo
; GetObjectInfo
;
; Object number is in A
;   Return object's location in B
;   Return pointer to object's data in X  
; Return Z as comparisson between object's location and $01BC
;
; Object data is two bytes. If 1st byte has bit 7 set, then the second byte
; is the new object's number. This allows one object to "morph" into another.
;
0666: 8E 18 8D        LDX   #$188D        ; Object location table
0669: BD 06 7C        JSR   $067C         ; A is location
066C: A6 80           LDA   ,X+           ; Get object data
066E: E6 84           LDB   ,X            ; Get room (or morphed type)
0670: 85 80           BITA  #$80          ; Has object been morphed?
0672: 1F 98           TFR   B,A           ; Room to A
0674: 26 F0           BNE   GetObjectInfo ; (0666) Yes ... lookup the new object
0676: 30 1F           LEAX  -$01,X        ; Point to start of object
0678: B1 01 BC        CMPA  $01BC         ; Compare object's location to test location
067B: 39              RTS                 ; Done

;##TableOffsets
; Two and Four-byte table offsets
; X = X + (A-1)*2
;
067C: 1F 89           TFR   A,B           ; A extended ...  
067E: 4F              CLRA                ; .. to D
067F: 5A              DECB                ; Object table is 1 based
0680: 58              ASLB                ; D = D ...
0681: 49              ROLA                ; ... * 2
0682: 30 8B           LEAX  D,X           ; Add D to X
0684: 39              RTS                 ; Done
;
; X = X + (A-1)*4
;
0685: 1F 89           TFR   A,B           ; A extended ...
0687: 4F              CLRA                ; ... to D 
0688: 5A              DECB                ; Room table is 1 based
0689: 58              ASLB                ; D = D ...
068A: 49              ROLA                ; ... * 2
068B: 58              ASLB                ; D = D ...
068C: 49              ROLA                ; ... * 2
068D: 30 8B           LEAX  D,X           ; Add D to X
068F: 39              RTS                 ; Done

;##MoveObject
; MoveObject
;
; Move object to new location
;  Object number is in B
;  Location is in $01BC
; Return object pointer in X
;
0690: BD 06 66        JSR   GetObjectInfo ; (0666) Find object
0693: 30 01           LEAX  +$01,X        ; Object's room
0695: B6 01 BC        LDA   $01BC         ; New value
0698: A7 84           STA   ,X            ; Move object to new location
069A: 30 1F           LEAX  -$01,X        ; Restore object pointer
069C: 39              RTS                 ; Done

;##ProcessRoomScript
; Find scripts to match verb word $01E8 and run script. First script to pass
; ends processing. An error condition usually continues the script process.
; A "successful" script stops the chain.
;
; X points to a list of choices for first-word tokens. This function
; locates the right list(s) if any and runs it/them. First matching script
; to pass returns with Z=0. Several scripts may match the word. If a list
; fails, the next are tried. Processing stops on the first passing matching
; script.
;
; Return with
; Z=1 ... no script found OR script(s) were found but any/all failed
; Z=0 ... script was found and every command passed 
;
; Format of word/script description list:
;   AA LL N0 N1 N2   ; First word AA and script comands (N) for AA. LL is size of command list.
;   BB LL N0 N1      ; Second word BB and script commands (N) for BB. LL is size of command list.
;   00               ; End of list
;
069D: E6 84           LDB   ,X            ; Get command word
069F: 27 FB           BEQ   $069C         ; End of list ... out (Z=0 no matching script)
06A1: F6 01 E8        LDB   Verb         ; (01E8) Action word
06A4: E1 80           CMPB  ,X+           ; Is this the right list?
06A6: 27 05           BEQ   $06AD         ; Yes ... do action
06A8: E6 84           LDB   ,X            ; Get length
06AA: 3A              ABX                 ; Skip this list
06AB: 20 F0           BRA   $069D         ; Keep trying lists
06AD: BD 06 B4        JSR   $06B4         ; Run script (Z=0:all passed, Z=1:a command failed)
06B0: 26 EA           BNE   $069C         ; If script finished OK then return Z=0 (every command passed)
06B2: 20 E9           BRA   $069D         ; Script failed ... try next word/script
;
; Process a script of commands
;   Size  Command0  Command1  Command2   ...
;   In: X=start of script
;  Out: X=one past end of script
; 
06B4: 1F 13           TFR   X,U           ; Hold start of script
06B6: E6 84           LDB   ,X            ; Length of script
06B8: 3A              ABX                 ; Turn into pointer
06B9: 34 10           PSHS  ,X            ; Save pointer to end-of-script position
06BB: 1F 31           TFR   U,X           ; Start of script back to X
06BD: 30 01           LEAX  +$01,X        ; Skip over script length
06BF: A6 80           LDA   ,X+           ; Get command number
06C1: 34 10           PSHS  ,X            ; Hold current script pointer
06C3: 8E 0A 17        LDX   #$0A17        ; Jump table
06C6: BD 06 7C        JSR   $067C         ; Offest
06C9: 6E 94           JMP   [,X]          ; Indirection here ... processing function word
;
; Return from all script commands come here. We either get FuncPassed in which we
; continue to the next (returning a Z=0 success when finished). Or we get
; a FuncFailed in which we abort the list and return Z=1.
;
; FuncPassed
;
06CB: 35 10           PULS  ,X            ; Script pointer
06CD: 35 20           PULS  ,Y            ; End-of-script position
06CF: 10 BF 01 BF     STY   $01BF         ; Have we reached ...
06D3: BC 01 BF        CMPX  $01BF         ; ... the end of current script?
06D6: 26 03           BNE   $06DB         ; No ... keep processing this script
06D8: 8A 01           ORA   #$01          ; Z=0 (all script commands passed)
06DA: 39              RTS                 ; Done
06DB: 34 20           PSHS  ,Y            ; Put the end-of-script position back on the stack
06DD: 20 E0           BRA   $06BF         ; Next routine
;
; FuncFailed
;
06DF: 35 10           PULS  ,X            ; Script pointer
06E1: 35 10           PULS  ,X            ; End=of-script position
06E3: 4F              CLRA                ; Z=1 (a script command failed)
06E4: 39              RTS                 ; Done

;##GameFunction_7
; ===============================================
;
; GAME FUNCTION 7 (*) Run sub-script and return reversed pass/fail logic.
;  If a command in the sub-script fails then stop the sub-script and continue the parent script after the sub-script.
;  If the sub-script passes then return a failed status thus aborting the parent script.
;
; SubScriptRev
;
06E5: 35 10           PULS  ,X             ; Script pointer
06E7: BD 06 B4        JSR   $06B4          ; Run script (Z=0:all passed, Z=1:a command failed)
06EA: 34 10           PSHS  ,X             ; Script pointer back to stack
06EC: 27 DD           BEQ   FuncPassed     ; (06CB) A command failed ... continue parent list
06EE: 35 10           PULS  ,X             ; Pop script pointer
06F0: 35 10           PULS  ,X             ; Pop end-of-script pointer
06F2: 8A 01           ORA   #$01           ; Script passed ... abort parent list processing
06F4: 39              RTS                  ; Done

;##GetInputAndParse
; Get user input and parse
;  01E7 <- verb
;  01E8 <- object number (noun)
;  01E9 <- gramar type
;
06F5: BD 09 B3        JSR   $09B3          ; Fill input buffer
06F8: 86 0D           LDA   #$0D           ; Rows left ...
06FA: B7 01 B0        STA   LeftTillMORE   ; (01B0) ... until MORE
06FD: BD 07 C6        JSR   $07C6          ; Parse the input string
0700: BE 01 B4        LDX   $01B4          ; Pointer to noun word data
0703: F6 01 B2        LDB   $01B2          ; Number of bytes in word data
0706: B6 01 E9        LDA   $01E9          ; Word grammar
0709: 81 03           CMPA  #$03           ; Value 3 means nothing in buffer
070B: 27 E8           BEQ   $06F5          ; Nothing in buffer ... input again
070D: B6 01 E7        LDA   Noun          ; (01E7) Noun
0710: 26 29           BNE   $073B          ; We have a noun ... test it
0712: B6 01 E8        LDA   Verb          ; (01E8) Action word (throw, rub, get, etc)
0715: 26 15           BNE   $072C          ; There is a valid action word ... go handle it
;
; General error message ... didn't understand a thing
0717: F6 01 EA        LDB   $01EA          ; Last general error message
071A: 5C              INCB                 ; Point to next
071B: C4 03           ANDB  #$03           ; Roll around over 4 messages
071D: F7 01 EA        STB   $01EA          ; For next time
0720: 8E 0F 24        LDX   #$0F24         ; Table of general error messages
0723: 58              ASBB                 ; Index to offset
0724: 3A              ABX                  ; Point to error message
0725: AE 84           LDX   ,X             ; Get address of general error message
0727: BD 08 FC        JSR   $08FC          ; Print the error
072A: 20 C9           BRA   $06F5          ; Back for more
;
072C: B6 01 E9        LDA   $01E9          ; Action word type
072F: 81 C0           CMPA  #$C0           ; 11_000_000 means single word command
0731: 27 C1           BEQ   $06F4          ; Done
0733: 8E 0F A2        LDX   #$0FA2         ; "**verb** WHAT?" 
0736: BD 08 FC        JSR   $08FC          ; Print it (was expecting an object)
0739: 20 BA           BRA   $06F5          ; Try input again
;
; Validate noun
073B: BF 01 B4        STX   $01B4          ; Save pointer to noun word data
073E: B6 01 B1        LDA   $01B1          ; Was the last input an object and we asked for a verb?
0741: 26 6F           BNE   $07B2          ; Yes ... skip checking the noun (use what we have)
0743: 86 FF           LDA   #$FF           ; Location: backpack
0745: B7 01 BC        STA   $01BC          ; Parameter for GetObjectInfo compare
0748: A6 80           LDA   ,X+            ; Get object number
074A: BF 01 B4        STX   $01B4          ; Hold noun word data pointer
074D: 34 04           PSHS  ,B             ; Hold B
074F: BD 06 66        JSR   GetObjectInfo  ; (0666) Find object
0752: 35 04           PULS  ,B             ; Restore B
0754: 27 52           BEQ   $07A8          ; Object is actually in pack ... go use it
0756: B6 01 E9        LDA   $01E9          ; Grammar type
0759: 81 40           CMPA  #$40           ; 01_000_000 means noun-in-pack
075B: 27 16           BEQ   $0773          ; Yes ... check pack
075D: BE 01 B4        LDX   $01B4          ; Noun word pointer
0760: 30 1F           LEAX  -$01,X         ; Back up word pointer
0762: B6 18 E5        LDA   RoomNumber     ; (18E5) Current room
0765: B7 01 BC        STA   $01BC          ; Parameter to GetObjectInfo
0768: A6 84           LDA   ,X             ; Object number
076A: 34 04           PSHS  ,B             ; Hold B
076C: BD 06 66        JSR   GetObjectInfo  ; (0666) Find object
076F: 35 04           PULS  ,B             ; Restore B
0771: 27 35           BEQ   $07A8          ; Yes ... object is in room. Use it.
0773: BE 01 B4        LDX   $01B4          ; Restore word data pointer
0776: 5A              DECB                 ; All objects of this name tried?
0777: 26 CA           BNE   $0743          ; No ... keep looking for matching object
;
; Object not found error (either not in pack or not in room depending on grammar)
0779: B6 01 E9        LDA   $01E9      ; Grammar type
077C: 81 40           CMPA  #$40       ; 01_000_000 means noun-in-pack
077E: 26 05           BNE   $0785      ; Error ... can't find noun in room      
0780: 8E 0F 3D        LDX   #$0F3D     ; "YOU AREN'T CARRYING IT." (can't find noun in pack)
0783: 20 19           BRA   $079E      ; Print and back to try again
;
0785: 8E 0F 2C        LDX   #$0F2C     ; " I SEE NO "
0788: BD 08 FC        JSR   $08FC      ; Print it
078B: 86 01           LDA   #$01       ; Replace '?' with ...
078D: B7 0F A0        STA   $0FA0      ; ... no-CR terminator
0790: 8E 0F 78        LDX   #$0F78     ; User typed object
0793: BD 08 FC        JSR   $08FC      ; Print the object
0796: 86 3F           LDA   #$3F       ; Restore the ...
0798: B7 0F A0        STA   $0FA0      ; ... '?' at the end of the message
079B: 8E 0F 36        LDX   #$0F36     ; " HERE."
079E: BD 08 FC        JSR   $08FC      ; Print it
07A1: 4F              CLRA             ; Zero out ...
07A2: B7 01 E7        STA   Noun      ; (01E7) ... object
07A5: 7E 06 F5        JMP   $06F5      ; Back to try input again
;
; Found object
07A8: BE 01 B4        LDX   $01B4      ; Object data pointer
07AB: 30 1F           LEAX  -$01,X     ; Back up to start
07AD: A6 84           LDA   ,X         ; Get object number
07AF: B7 01 E7        STA   Noun      ; (01E7) Noun
07B2: B6 01 E8        LDA   Verb      ; (01E8) Verb
07B5: 27 01           BEQ   $07B8      ; Noun but no verb ... prompt for the verb
07B7: 39              RTS              ; Got verb and noun. Done
;
07B8: 8E 0F 55        LDX   #$0F55      ; "WHAT DO YOU WANT ME TO DO WITH THE *****?"
07BB: BD 08 FC        JSR   $08FC       ; Print message
07BE: 86 01           LDA   #$01        ; We got the object ....
07C0: B7 01 B1        STA   $01B1       ; ... will take just verb
07C3: 7E 06 F5        JMP   $06F5       ; Get user input and parse
;
; Parse the input line
07C6: 8E 01 C6        LDX   #$01C6      ; Start of input buffer
07C9: 7F 01 B3        CLR   $01B3       ; Nothing in buffer to start with
07CC: 7F 01 E9        CLR   $01E9       ; Grammar type
07CF: 10 8E 3C 40     LDY   #$3C40      ; Word table
07D3: 10 BF 01 F0     STY   $01F0       ; Hold pointer
07D7: A6 84           LDA   ,X          ; Next in input
07D9: 81 20           CMPA  #$20        ; Skip ...
07DB: 26 04           BNE   $07E1       ; ... over ...
07DD: 30 01           LEAX  +$01,X      ; ... white ...
07DF: 20 F6           BRA   $07D7       ; ... space
07E1: BF 01 F2        STX   $01F2       ; Start of token
07E4: 4D              TSTA              ; End of buffer?
07E5: 10 27 00 A2     LBEQ  $088B       ; Yes ... done
07E9: 86 01           LDA   #$01        ; Flag that something ... 
07EB: B7 01 B3        STA   $01B3       ; ... is in the buffer 
07EE: 34 10           PSHS  ,X          ; Remember start of token
07F0: A6 A4           LDA   ,Y          ; From word table
07F2: 10 27 00 A0     LBEQ  $0896       ; Word not found ... clear 1E8 and 1E7 and skip it 
07F6: B7 01 F8        STA   $01F8       ; Store word's data
07F9: 84 07           ANDA  #$07        ; Lower 3 bits
07FB: B7 01 BA        STA   $01BA       ; Token length
07FE: B7 01 F4        STA   $01F4       ; Token length again
0801: F6 01 F8        LDB   $01F8       ; Original byte
0804: C4 38           ANDB  #$38        ; Middle 3 bits (bytes in token data)
0806: 57              ASRB              ; Shifted ...
0807: 57              ASRB              ; ... to ...
0808: 57              ASRB              ; ... lower in B
0809: 10 BF 01 F0     STY   $01F0       ; Current word pointer
080D: 31 21           LEAY  +$01,Y      ; Next byte
080F: A6 A4           LDA   ,Y          ; Get character
0811: A1 84           CMPA  ,X          ; Matches?
0813: 26 65           BNE   $087A       ; Nope ... go to next
0815: 30 01           LEAX  +$01,X      ; Next in input
0817: 31 21           LEAY  +$01,Y      ; Next in token
0819: 7A 01 BA        DEC   $01BA       ; All done?
081C: 26 F1           BNE   $080F       ; No ... check em all
081E: B6 01 F4        LDA   $01F4       ; Token length
0821: 81 06           CMPA  #$06        ; Token is 6 long and we matched all?
0823: 27 09           BEQ   $082E       ; Yes ... take it but skip any non checked at end
0825: A6 84           LDA   ,X          ; Next character from user
0827: 81 20           CMPA  #$20        ; A space?
0829: 27 10           BEQ   $083B       ; Yes ... perfect match
082B: 4D              TSTA              ; End of user input?
082C: 26 53           BNE   $0881       ; No ... skip token data and try next token
;
082E: A6 84           LDA   ,X          ; Get character
0830: 81 20           CMPA  #$20        ; A space?
0832: 27 07           BEQ   $083B       ; Yes ... found the end
0834: 4D              TSTA              ; End of buffer?
0835: 27 04           BEQ   $083B       ; Yes ... found the end
0837: 30 01           LEAX  +$01,X      ; Skip the character
0839: 20 F3           BRA   $082E       ; Until space or end
;
083B: B6 01 F8        LDA   $01F8       ; Original word data
083E: 84 C0           ANDA  #$C0        ; Upper two bits
0840: 27 14           BEQ   $0856       ; Go handle object data
0842: B7 01 E9        STA   $01E9       ; Save the grammar type
0845: A6 A4           LDA   ,Y          ; Word value ...
0847: B7 01 E8        STA   Verb       ; (01E8) ... is verb
084A: 34 10           PSHS  ,X          ; Hold pointer
084C: 8E 0F A2        LDX   #$0FA2      ; Space for printing verb
084F: BD 08 B6        JSR   $08B6       ; Copy it over
0852: 35 10           PULS  ,X          ; Restore
0854: 20 19           BRA   $086F       ; Continue with next token if there is a space next
;
; Word is an object
0856: A6 A4           LDA   ,Y          ; Get word data
0858: B7 01 E7        STA   Noun       ; (01E7) Store object number
085B: 10 BF 01 B4     STY   $01B4       ; Store pointer to word data
085F: F7 01 B2        STB   $01B2       ; Store size of object data (number of objects)
0862: 7F 01 B1        CLR   $01B1       ; We no longer remember a past lone object
0865: 34 10           PSHS  ,X          ; Hold pointer
0867: 8E 0F 78        LDX   #$0F78      ; "WHAT DO YOU WANT ME TO DO WITH THE ***** ?"
086A: BD 08 B6        JSR   $08B6       ; Make the error message in case
086D: 35 10           PULS  ,X          ; Restore the pointer
086F: A6 84           LDA   ,X          ; Next in input buffer
0871: 81 20           CMPA  #$20        ; A space means more to process
0873: 35 20           PULS  ,Y          ; Drop stacked word pointer
0875: 10 27 FF 56     LBEQ  $07CF       ; Parse next token
0879: 39              RTS               ; Done
;
; Skip over current entry in token table
087A: 31 21           LEAY  +$01,Y   ; Skip to ...
087C: 7A 01 BA        DEC   $01BA    ; ... end of ...
087F: 26 F9           BNE   $087A    ; ... token text
0881: 31 21           LEAY  +$01,Y   ; Skip to ...
0883: 5A              DECB           ; ... end of ...
0884: 26 FB           BNE   $0881    ; ... token data
0886: 35 10           PULS  ,X       ; Restore pointer to start of input word
0888: 7E 07 D7        JMP   $07D7    ; Keep trying
;
088B: B6 01 B3        LDA $01B3    ; Something in the buffer? 
088E: 26 E9           BNE $0879    ; Yes ... go handle it
0890: 86 03           LDA #$03     ; Grammar type 3 means ...
0892: B7 01 E9        STA $01E9    ; ... nothing in buffer
0895: 39              RTS          ; Done

; Skip leading space in front of token and then skip to next token.
; If there is another token go back and decode. Otherwise return.
0896: 35 10           PULS  ,X       ; Restore pointer to token
0898: 7F 01 E8        CLR   Verb    ; (01E8) Clear action word
089B: 7F 01 E7        CLR   Noun    ; (01E7) Clear object number
089E: A6 84           LDA   ,X       ; Character from token 
08A0: 81 20           CMPA  #$20     ; Space?
08A2: 26 04           BNE   $08A8    ; No ... we found the token
08A4: 30 01           LEAX  +$01,X   ; Yes space. Skip ...
08A6: 20 F6           BRA   $089E    ; ... to start of token
08A8: A6 84           LDA   ,X       ; Character from token
08AA: 27 E9           BEQ   $0895    ; End of buffer ... done
08AC: 81 20           CMPA  #$20     ; Space?
08AE: 10 27 FF 1D     LBEQ  $07CF    ; Yes ... start decoding next token
08B2: 30 01           LEAX  +$01,X   ; Skip character
08B4: 20 F2           BRA   $08A8    ; Keep looking

; Copy input word to 40-byte destination buffer. Fill end of the buffer
; with '@' characters which are ignored by printer routine.
08B6: 1E 12           EXG   X,Y      ; Destination to Y
08B8: BE 01 F2        LDX   $01F2    ; Current word in parse buffer
08BB: C6 28           LDB   #$28     ; Max size
08BD: A6 84           LDA   ,X       ; Character from input word
08BF: 27 0D           BEQ   $08CE    ; End of buffer ... end of word
08C1: 81 20           CMPA  #$20     ; Space is end ...
08C3: 27 09           BEQ   $08CE    ; ... of word
08C5: A7 A0           STA   ,Y+      ; Copy the input word ...
08C7: 30 01           LEAX  +$01,X   ; ... to the destination
08C9: 5A              DECB           ; All room ...
08CA: C1 01           CMPB  #$01     ; ... taken?
08CC: 26 EF           BNE   $08BD    ; No ... keep going
08CE: 86 40           LDA   #$40     ; '@' characters are ignored by printing
08D0: A7 A0           STA   ,Y+      ; Fill out ...
08D2: 5A              DECB           ; ... rest of ...
08D3: 26 F9           BNE   $08CE    ; ... destination buffer
08D5: 39              RTS            ; Done

;##PrintPackedMessage
; Unpack a message (or multiple packed messages) and print.
; X = pointer to message structure
;
08D6: A6 84           LDA   ,X       ; Get the length
08D8: 27 FB           BEQ   $08D5    ; None ... out
08DA: 30 01           LEAX  +$01,X   ; Skip over length
08DC: 10 8E 01 C6     LDY   #$01C6   ; Reuse input buffer
08E0: BD 10 66        JSR   $1066    ; Unpack and print
08E3: E6 84           LDB   ,X       ; Get byte
08E5: 27 2C           BEQ   $0913    ; 0 ... do CR
08E7: C1 01           CMPB  #$01     ; 1 ...
08E9: 27 EA           BEQ   $08D5    ; ... no CR
08EB: 34 10           PSHS  ,X       ; Hold pointer
08ED: 1F 98           TFR   B,A      ; Character to A
08EF: BD 09 45        JSR   $0945    ; Print character to screen
08F2: 35 10           PULS  ,X       ; Restore pointer
08F4: A6 80           LDA   ,X+      ; Get next byte from unpacked
08F6: 81 0A           CMPA  #$0A     ; Mark for another packing?
08F8: 27 DC           BEQ   $08D6    ; Yes ... start again
08FA: 20 E7           BRA   $08E3    ; No ... continue this packing

;##PrintUnpackedMessage
; Print uncompressed message pointed to by X.
; '@' characters are ignored (allows for padding of added words)
; Terminated with 0 ... add a CR
; Terminated with 1 ... no CR
;
08FC: A6 84           LDA ,X      ; Get byte
08FE: 27 13           BEQ $0913   ; End with CR
0900: 81 01           CMPA #$01   ; Just stop printing ...
0902: 27 D1           BEQ $08D5   ; ... with no CR
0904: 81 40           CMPA #$40   ; Is it '@'
0906: 27 07           BEQ $090F   ; Just ignore it
0908: 34 10           PSHS ,X     ; Save X
090A: BD 09 45        JSR $0945   ; A to screen
090D: 35 10           PULS ,X     ; Restore X
090F: 30 01           LEAX +$01,X ; Next in message
0911: 20 E9           BRA $08FC   ; Keep going
;
; Print a CR
0913: 86 0D           LDA #$0D    ; CR
0915: BD 09 45        JSR $0945   ; Print a CR
0918: 7A 01 B0        DEC LeftTillMORE   ; (01B0) Rows left before more
091B: 2B 01           BMI $091E   ; Pause print out with <MORE>
091D: 39              RTS         ; Done

;##MorePrompt
; Print <MORE> and wait for key
;
091E: 34 74           PSHS U,Y,X,B ;
0920: 86 0D           LDA #$0D    ; Reset MORE ...
0922: B7 01 B0        STA LeftTillMORE   ; (01B0) ... row count
0925: 8E 10 19        LDX #$1019  ; " <MORE>" message
0928: BD 08 FC        JSR $08FC   ; Print message
092B: BD 09 37        JSR $0937   ; Wait for user to press a key
092E: 9E 88           LDX $88     ; Back pointer ...
0930: 30 19           LEAX -$07,X ; ... up 7 over ...
0932: 9F 88           STX $88     ; ... MORE prompt
0934: 35 74           PULS B,X,Y,U  ;
0936: 39              RTS         ;

;##ReadKey
; Read a key from keyboard
; Read key from player
;
0937: 34 20           PSHS ,Y               ; Save Y
0939: 7C 01 EB        INC RndCount ; (01EB) Counter
093C: AD 9F A0 00     JSR [$A000]           ; Get a key
0940: 27 F7           BEQ $0939             ; Keep going till we get one
0942: 35 20           PULS ,Y               ; Restore
0944: 39              RTS                   ; Out

;##PrintCharacterAutoWrap
; Print character in A to screen. This handles auto word-wrapping and
; auto <MORE> prompting.
;
0945: F6 02 07        LDB LastPrinted   ; (0207) Last printed character
0948: C1 20           CMPB #$20   ; Last printed a space?
094A: 26 16           BNE $0962   ; No ... skip on
094C: 81 20           CMPA #$20   ; Printing a second space now?
094E: 27 5B           BEQ $09AB   ; Yes ... just skip it (More and out)
0950: 81 2E           CMPA #$2E   ; A '.' ?
0952: 27 08           BEQ $095C   ; Yes. Ignore leading space.
0954: 81 3F           CMPA #$3F   ; A '?' ?
0956: 27 04           BEQ $095C   ; Yes. Ignore leading space.
0958: 81 21           CMPA #$21   ; A '!' ?
095A: 26 06           BNE $0962   ; No. Don't ignore space.
;
095C: DE 88           LDU $88      ; Back screen ...
095E: 33 5F           LEAU -$01,U  ; ... pointer up ...
0960: DF 88           STU $88      ; ... over ignored space
;
0962: B7 02 07        STA LastPrinted    ; (0207) Store last printed character
0965: AD 9F A0 02     JSR [$A002]  ; Print A to screen 
0969: 96 89           LDA $89      ; LSB of screen position (we know MSB is a 4 or 5)
096B: 81 FE           CMPA #$FE    ; Have we reached the end of the screen?
096D: 25 3C           BCS $09AB    ; No ... handle any <MORE> and out
096F: DE 88           LDU $88      ; Cursor position
0971: 33 C8 DF        LEAU -$21,U  ; Back up to end of current row (where it will be after CR)
0974: 86 0D           LDA #$0D     ; CR ...
0976: AD 9F A0 02     JSR [$A002]  ; ... to screen
097A: 7A 01 B0        DEC LeftTillMORE    ; (01B0) Rows left until MORE is needed
097D: A6 C4           LDA ,U       ; Find the ...
097F: 81 60           CMPA #$60    ; ... space before ...
0981: 27 04           BEQ $0987    ; ... the last ...
0983: 33 5F           LEAU -$01,U  ; ... word ...
0985: 20 F6           BRA $097D    ; ... on the line
;
0987: 33 41           LEAU  +$01,U        ; Now pointing to the last word on the line
0989: A6 C4           LDA   ,U            ; Get next character in buffer
098B: 81 60           CMPA  #$60          ; Is it a space?
098D: 27 1C           BEQ   $09AB         ; Yes ... all done
098F: C6 60           LDB   #$60          ; Store a space ...
0991: E7 C4           STB   ,U            ; ... over this on screen
0993: 81 60           CMPA  #$60          ; Make sure ...
0995: 25 02           BCS   $0999         ; ... upper ...
0997: 80 40           SUBA   #$40         ; ... case
0999: B7 02 07        STA   LastPrinted         ; (0207) Store last printed character
099C: AD 9F A0 02     JSR   [$A002]       ; Print A to screen on new line
09A0: 20 E5           BRA   $0987         ; Move overhang to next line
;
09A2: 34 20           PSHS  ,Y            ; Send character ...
09A4: AD 9F A0 02     JSR   [$A002]       ; ... to ...
09A8: 35 20           PULS  ,Y            ; ... screen
09AA: 39              RTS                 ; Done
;
09AB: 7D 01 B0        TST   LeftTillMORE         ; (01B0) Time for a <MORE> prompt?
09AE: 10 2B FF 6C     LBMI  $091E         ; Yes ... do it and out
09B2: 39              RTS                 ; Done

;##PromptAndReadLine
; Fill input buffer at 1C6 with user input line
09B3: 86 3A           LDA   #$3A          ; A ':'
09B5: BD 09 A2        JSR   $09A2         ; Print character without processing
09B8: BD 0A 13        JSR   $0A13         ; Print white-ish block
09BB: 8E 01 C6        LDX   #$01C6        ; Input buffer
09BE: 7F 01 BA        CLR   $01BA         ; Input buffer is empty
09C1: 34 34           PSHS  Y,X,B         ; Get ...
09C3: BD 09 37        JSR   $0937         ; ... key from ...
09C6: 35 34           PULS  B,X,Y         ; ... player
09C8: 1F 89           TFR   A,B           ; Hold original key
09CA: 81 08           CMPA  #$08          ; A backspace?
09CC: 27 2A           BEQ   $09F8         ; Yes ... handle backspace
09CE: A7 84           STA   ,X            ; Save the input to the buffer
09D0: BD 09 A2        JSR   $09A2         ; Send the character to the screen
09D3: 81 0D           CMPA  #$0D          ; Was it ENTER
09D5: 27 33           BEQ   $0A0A         ; Yes ... store a 0 on end of buffer and clear cursor and DONE
09D7: 8D 3A           BSR   $0A13         ; Set cursor to whiteish block
09D9: 7C 01 BA        INC   $01BA         ; Increment character count
09DC: 30 01           LEAX  +$01,X        ; Next in buffer pointer
09DE: 10 8E 01 E4     LDY   #$01E4        ; Have ...
09E2: 10 BF 01 BF     STY   $01BF         ; ... we ...
09E6: BC 01 BF        CMPX  $01BF         ; ... reached end of buffer?
09E9: 25 D6           BCS   $09C1         ; No ... keep taking keys
09EB: 8D 1F           BSR   $0A0C         ; End of buffer ... 
09ED: 86 08           LDA   #$08          ; ... pretend ...
09EF: 8D B1           BSR   $09A2         ; ... it ...
09F1: BD 0A 13        JSR   $0A13         ; ... is ...
09F4: 30 1F           LEAX  -$01,X        ; ... backspace
09F6: 20 C9           BRA   $09C1         ; Take next key
;
; Backspace
09F8: 30 1F           LEAX  -$01,X        ; Back the buffer up one
09FA: 8C 01 C6        CMPX  #$01C6        ; Already at the beginning?
09FD: 25 BC           BCS   $09BB         ; Yes ... ignore the backspace
09FF: 8D 0B           BSR   $0A0C         ; Store space character to cursor
0A01: 86 08           LDA   #$08          ; Send back-space ...
0A03: BD 09 A2        JSR   $09A2         ; ... to screen
0A06: 8D 0B           BSR   $0A13         ; Show white-ish block cursor
0A08: 20 B7           BRA   $09C1         ; Loop back for next key
;
0A0A: 6F 84           CLR   ,X            ; New end of the input buffer
0A0C: 86 60           LDA #$60            ; Space character
0A0E: A7 9F 00 88     STA [$0088]         ; Store to cursor
0A12: 39              RTS                 ; Done
0A13: 86 CF           LDA #$CF            ; White-ish block
0A15: 20 F7           BRA $0A0E           ; Store to cursor and done

;##ScriptCommands
; Function table
;
; b = 2 bytes ... message address
; c = 1 byte  ... object number
; d = 1 byte  ... room number
; e = 2 bytes ... old object number and morphed object number
; f = 2 bytes ... morphed object number and new room number
;
0A17: 0B 05       ; 01 1d MoveToRoomN
0A19: 0C 68       ; 02 1c AssertObjectNIsInPack
0A1B: 0C 7E       ; 03 1c AssertObjectNIsInCurrentRoomOrPack
0A1D: 0D 10       ; 04 2b PrintMessageNN
0A1F: 0F 18       ; 05 0  PrintScoreAndStop
0A21: 00 00       ; 06 -  NULL POINTER
0A23: 06 E5       ; 07 1* SubScriptRev
0A25: 0F 12       ; 08 0  PrintScore
0A27: 0F 18       ; 09 0  PrintScoreAndStop
0A29: 0C C6       ; 10 1  AssertRandomIsGreaterThanN
0A2B: 0D 1C       ; 11 1c DropObjectN
0A2D: 0C E0       ; 12 1d MoveToRoomNIfItWasLastRoom
0A2F: 0C AB       ; 13 0  AssertPackIsEmptyExceptForVase
0A31: 0D 33       ; 14 0  MoveToLastRoom
0A33: 0D 4D       ; 15 0  PrintInventory    
0A35: 0D 92       ; 16 0  PrintRoomDescription
0A37: 0D 98       ; 17 1c AssertObjectNMatchesUserInput
0A39: 0D A6       ; 18 1c GetObjectFromRoom
0A3B: 00 00       ; 19 -  NULL POINTER
0A3D: 0D E8       ; 20 0  PrintOK
0A3F: 0D F1       ; 21 2f UnmorphObjectNToRoomP
0A41: 0C F4       ; 22 0  GetUserInputObject
0A43: 0D E2       ; 23 0  DropUserInputObject
0A45: 0C 39       ; 24 1c MoveObjectNToCurrentRoom
0A47: 0C 4B       ; 25 2e MorphObjectNIntoP
0A49: 0C 97       ; 26 1c AssertObjectNIsInCurrentRoom
0A4B: 0E BB       ; 27 0  LoadGame  
0A4D: 0E 81       ; 28 0  SaveGame
0A4F: 0F 1D       ; 29 0  JumpToTopOfGameLoop

;##AfterEveryStep
; This processing takes place after every user input.
;  Increment the count on the lamp and the number of turns.
;  Warn the player if the lamp is going dim and change the batteries automatically.
;
0A51: 86 0F           LDa #$0F          ; Lamp (lit version)
0A53: 8E 18 8D        LDX #$188D        ; Object table
0A56: BD 06 7C        JSR $067C         ; Get lamp's data
0A59: 30 01           LEAX +$01,X       ; Lamp's location
0A5B: A6 84           LDa ,X            ; Get the location
0A5D: 27 54           BEQ $0AB3         ; Hum ... it's nowhere ???
0A5F: FC 18 E8        LDD LampTime      ; (18E8) Get time
0A62: C3 00 01        ADDd #$0001       ; Bump time ...
0A65: FD 18 E8        STD LampTime      ; (18E8) ... by one
0A68: 81 01           CMPa #$01         ; Has it been burning 256 turns?
0A6A: 26 47           BNE $0AB3         ; No ... move on
0A6C: C1 22           CMPb #$22         ; Warn the player?
0A6E: 26 08           BNE $0A78         ; No ... 
0A70: 8E 38 5A        LDX #$385A        ; "Your lamp is getting dim. Better start wrap this up ..."
0A73: BD 08 D6        JSR $08D6         ; Print message
0A76: 20 7A           BRA $0AF2         ; Continue
0A78: C1 36           CMPb #$36         ; Really getting dim now?
0A7A: 26 37           BNE $0AB3         ; No ... move on
0A7C: 86 0F           LDa #$0F          ; Find ...
0A7E: 8E 18 8D        LDX #$188D        ; ... lamp ...
0A81: BD 06 7C        JSR $067C         ; ... room ...
0A84: 30 01           LEAX +$01,X       ; ... number
0A86: E6 84           LDb ,X            ; Get the number
0A88: F7 01 BA        STb $01BA         ; Hold it
0A8B: 6F 84           CLR ,X            ; Room is now ... nowhere
0A8D: 8E 18 8D        LDX #$188D        ; Object data
0A90: 86 2C           LDa #$2C          ; Dead lamp
0A92: BD 06 7C        JSR $067C         ; Offset
0A95: F6 01 BA        LDb $01BA         ; Lamp's room number
0A98: 30 01           LEAX +$01,X       ; Dead lamp ...
0A9A: E7 84           STb ,X            ; ... to pack
0A9C: 86 23           LDa #$23          ; Batteries
0A9E: C6 FF           LDb #$FF          ; Pack
0AA0: F7 01 BC        STb $01BC         ; For find
0AA3: BD 06 66        JSR GetObjectInfo ; (0666) Batteries in pack?
0AA6: 27 0B           BEQ $0AB3         ; Yes ... change them
0AA8: 8E 38 D8        LDX #$38D8        ; "Your lamp has run out of power."
0AAB: BD 08 D6        JSR $08D6         ; Print message
0AAE: BD 0B D2        JSR $0BD2         ; Print room description (it's dark)
0AB1: 20 3F           BRA $0AF2         ; Continue  
0AB3: BE 18 E8        LDX LampTime      ; (18E8) Current lamp time
0AB6: 8C 01 2C        CMPX #$012C       ; Time to change batteries?
0AB9: 25 37           BCS $0AF2         ; No ... keep going
0ABB: 86 FF           LDa #$FF          ; Pack
0ABD: B7 01 BC        STa $01BC         ; For find
0AC0: 86 23           LDa #$23          ; Batteries
0AC2: BD 06 66        JSR GetObjectInfo ; (0666) Do we have them?
0AC5: 26 2B           BNE $0AF2         ; No ... on
0AC7: 86 2C           LDa #$2C          ; Dead-lamp
0AC9: BD 06 66        JSR GetObjectInfo ; (0666) In pack?
0ACC: 26 24           BNE $0AF2         ; No ... move on
0ACE: 30 01           LEAX +$01,X       ; Object room
0AD0: 6F 84           CLR ,X            ; Get rid of dead-lamp
0AD2: 86 23           LDa #$23          ; Get ...
0AD4: 8E 18 8D        LDX #$188D        ; ... rid ...
0AD7: BD 06 7C        JSR $067C         ; ... of ...
0ADA: 30 01           LEAX +$01,X       ; ... the ...
0ADC: 6F 84           CLR ,X            ; ... batteries
0ADE: 30 02           LEAX +$02,X       ; Put worn out batteries ...
0AE0: 86 FF           LDa #$FF          ; ... in ...
0AE2: A7 84           STa ,X            ; ... backpack ...
0AE4: B7 01 BC        STa $01BC         ; For move
0AE7: 86 0F           LDa #$0F          ; Move lit-lamp ...
0AE9: BD 06 90        JSR MoveObject    ; ... back to pack
0AEC: 8E 39 1D        LDX #$391D        ; "I'm changing the batteries ..."
0AEF: BD 08 D6        JSR $08D6         ; Print message
;
; Bump the turn-counter in BCD format
0AF2: B6 18 E7        LDa TurnCountLSB  ; (18E7) Number of turns LSB
0AF5: 8B 01           ADDa #$01         ; Add one
0AF7: 19              DAA               ; Adjust BCD after addition
0AF8: B7 18 E7        STa TurnCountLSB  ; (18E7) New LSB
0AFB: B6 18 E6        LDa TurnCountMSB  ; (18E6) Number of turns MSB
0AFE: 89 00           ADCa #$00         ; Add overflow from LSB
0B00: 19              DAA               ; Adjust BCD after addition
0B01: B7 18 E6        STa TurnCountMSB  ; (18E6) New MSB
0B04: 39              RTS               ; Done

;##GameFunction_1
; ===============================================
;
; GAME FUNCTION 1 (1) Move to a new room. If there is light in the new or
; old room the move succeeds.
;
; If there is no light in the new room or the old room, then
; the player falls in a pit 1/3 of the time. 
;
; If there is light in the room, the description is printed.
;
; If player has 3 treasures in pack the mummy moves them to the treasure room.
;
; MoveToRoomN
;
0B05: 35 10           PULS ,X               ; Processing cursor
0B07: E6 80           LDb ,X+               ; Get room number
0B09: 34 10           PSHS ,X               ; Update cursor
0B0B: F7 01 BB        STb $01BB             ; Remember value for later
0B0E: B6 18 E5        LDa RoomNumber        ; (18E5) Current room
0B11: B7 01 BC        STa $01BC             ; For find
0B14: 86 0F           LDa #$0F              ; Lamp (lit version)
0B16: BD 06 66        JSR GetObjectInfo     ; (0666) Look for lamp in this room
0B19: 27 44           BEQ $0B5F             ; Found it ... there is light
0B1B: 86 FF           LDa #$FF              ; Backpack value
0B1D: B7 01 BC        STa $01BC             ; For find
0B20: 86 0F           LDa #$0F              ; Lamp (lit version)
0B22: BD 06 66        JSR GetObjectInfo     ; (0666) Look for lamp in backpack
0B25: 27 38           BEQ $0B5F             ; Found it ... there is light
0B27: 8E 17 EB        LDX #$17EB            ; Ambient light table
0B2A: B6 18 E5        LDa RoomNumber        ; (18E5) Current room
0B2D: BD 06 7C        JSR $067C             ; * 2
0B30: A6 84           LDa ,X                ; Get value from table
0B32: 84 40           ANDa #$40             ; Light in room?
0B34: 26 29           BNE $0B5F             ; Yes ... no lamp needed
0B36: B6 01 BB        LDa $01BB             ; New room number
0B39: B7 01 BC        STa $01BC             ; For find
0B3C: 8E 17 EB        LDX #$17EB            ; Ambient light table
0B3F: BD 06 7C        JSR $067C             ; * 2
0B42: A6 84           LDa ,X                ; Get value
0B44: 84 40           ANDa #$40             ; Light in room?
0B46: 26 17           BNE $0B5F             ; Yes ... no lamp needed
0B48: 86 0F           LDa #$0F              ; Lamp (lit version)
0B4A: BD 06 66        JSR GetObjectInfo     ; (0666) Get object's data
0B4D: 27 10           BEQ $0B5F             ; We found it ... go on
0B4F: B6 01 EB        LDa RndCount ; (01EB) Rolling timer (a random number)
0B52: 81 67           CMPa #$67             ; 2/3rds chance of ...
0B54: 25 09           BCS $0B5F             ; ... making it without light
0B56: 8E 37 9A        LDX #$379A            ; "You fell into a pit and broke ..."
0B59: BD 08 D6        JSR $08D6             ; Print message
0B5C: 7E 0F 18        JMP $0F18             ; Endless loop
;
0B5F: B6 18 E5        LDa RoomNumber        ; (18E5) Current room ...
0B62: B7 18 EA        STa LastRoomNumber    ; (18EA) ... is now the last room
0B65: B6 01 BB        LDa $01BB             ; New ... 
0B68: B7 18 E5        STa RoomNumber        ; (18E5) ... current room
0B6B: BD 0B D2        JSR $0BD2             ; Print room description
0B6E: 86 2A           LDa #$2A              ; Object number for "Chest"
0B70: 8E 18 8D        LDX #$188D            ; Look up the ...
0B73: BD 06 7C        JSR $067C             ; ... object
0B76: 30 01           LEAX +$01,X           ; Get ...
0B78: A6 84           LDa ,X                ; ... object location
0B7A: 26 53           BNE $0BCF             ; Mummy already stole the treasure ... out
0B7C: 86 2C           LDa #$2C              ; Number of objects
0B7E: B7 01 BA        STa $01BA             ; Counter
0B81: 8E 18 8D        LDX #$188D            ; Object table
0B84: 5F              CLRb                  ; Count
0B85: A6 80           LDa ,X+               ; Get object data
0B87: 84 20           ANDa #$20             ; Is this treasure?
0B89: 27 07           BEQ $0B92             ; No ... skip this object
0B8B: A6 84           LDa ,X                ; Is object ...
0B8D: 81 FF           CMPa #$FF             ; ... in pack?
0B8F: 26 01           BNE $0B92             ; No skip
0B91: 5C              INCb                  ; Increment the count
0B92: 30 01           LEAX +$01,X           ; Next object
0B94: 7A 01 BA        DEC $01BA             ; Do ...
0B97: 26 EC           BNE $0B85             ; ... all objects
0B99: C1 02           CMPb #$02             ; Got less than 3 treasures?
0B9B: 25 32           BCS $0BCF             ; Yes ... don't steal them yet
0B9D: 8E 18 8D        LDX #$188D            ; Object data
0BA0: 86 2C           LDa #$2C              ; 44 to do
0BA2: B7 01 BA        STa $01BA             ; Temporary counter
0BA5: A6 80           LDa ,X+               ; Get object data
0BA7: 84 20           ANDa #$20             ; Is this treasure?
0BA9: 27 0D           BEQ $0BB8             ; No ... skip it
0BAB: A6 84           LDa ,X                ; Object location
0BAD: 81 FF           CMPa #$FF             ; In pack?
0BAF: 26 07           BNE $0BB8             ; No ... skip it
0BB1: 86 35           LDa #$35                   ; Treasure room in the maze
0BB3: A7 84           STa ,X                     ; Move treasure there
0BB5: 7A 18 EB        DEC NumInPack  ; (18EB) Minus one object in pack
0BB8: 30 01           LEAX +$01,X                ; Next object
0BBA: 7A 01 BA        DEC $01BA                  ; All done?
0BBD: 26 E6           BNE $0BA5                  ; No ... go back
0BBF: 86 35           LDa #$35                   ; Move ...
0BC1: B7 01 BC        STa $01BC                  ; ... object ...
0BC4: 86 2A           LDa #$2A                   ; ... to ...
0BC6: BD 06 90        JSR MoveObject             ; (0690) ... treasure room ... AGAIN !!!
0BC9: 8E 39 D6        LDX #$39D6                 ; "Mummy steals your treasure ..."
0BCC: BD 08 D6        JSR $08D6                  ; Print message
0BCF: 7E 06 CB        JMP FuncPassed     ; (06CB) OK
;
;##PrintRoomDescription
; Print room description
0BD2: B6 18 E5        LDa RoomNumber             ; (18E5) Current room
0BD5: 8E 17 EB        LDX #$17EB                 ; Ambient light table
0BD8: BD 06 7C        JSR $067C                  ; X = X + A*2
0BDB: A6 84           LDa ,X                     ; Get value
0BDD: 84 40           ANDa #$40                  ; Is there light?
0BDF: 26 20           BNE $0C01                  ; Yes ... print description 
0BE1: B6 18 E5        LDa RoomNumber             ; (18E5) Current room
0BE4: B7 01 BC        STa $01BC                  ; For find routine
0BE7: 86 0F           LDa #$0F                   ; Lamp (lit version)
0BE9: BD 06 66        JSR GetObjectInfo          ; (0666) Is lamp in room?
0BEC: 27 13           BEQ $0C01                  ; Yes ... print description
0BEE: 86 FF           LDa #$FF                   ; Pack value
0BF0: B7 01 BC        STa $01BC                  ; For find routine
0BF3: 86 0F           LDa #$0F                   ; Lamp (lit version)
0BF5: BD 06 66        JSR GetObjectInfo          ; (0666) Is it in pack?
0BF8: 27 07           BEQ $0C01                  ; Yes ... print room contents
0BFA: 8E 38 0C        LDX #$380C                 ; "It is now pitch black ..."
0BFD: BD 08 D6        JSR $08D6                  ; Print message
0C00: 39              RTS                        ; Done
; 
;##PrintObjectsInRoom
; Print object descriptions
0C01: B6 18 E5        LDa RoomNumber      ; (18E5) Current room
0C04: 8E 11 2E        LDX #$112E                 ; Room structures
0C07: BD 06 85        JSR $0685                  ; X = X + A * 4
0C0A: AE 84           LDX ,X                     ; Get description text
0C0C: BD 08 D6        JSR $08D6                  ; Unpack and print message
0C0F: 5F              CLRb                       ; Start with ...
0C10: 5C              INCb                       ; ... object 1
0C11: B6 18 E5        LDa RoomNumber      ; (18E5) Current room
0C14: B7 01 BC        STa $01BC                  ; For find routine
0C17: C1 2C           CMPb #$2C                  ; Done all objects?
0C19: 24 E5           BCC $0C00                  ; Yes ... out
0C1B: 34 04           PSHS ,B                    ; Remember count
0C1D: 1F 98           TFR B,A                    ; Object number
0C1F: BD 06 66        JSR GetObjectInfo          ; (0666) Get object location
0C22: 35 04           PULS ,B                    ; Restore count
0C24: 26 EA           BNE $0C10                  ; Not current room, go on
0C26: 1F 98           TFR B,A                    ; Into position
0C28: 34 04           PSHS ,B                    ; Hold current object
0C2A: 8E 18 ED        LDX #$18ED                 ; Object number to object description table
0C2D: BD 06 7C        JSR $067C                  ; Offset
0C30: AE 84           LDX ,X                     ; Get the object description
0C32: BD 08 D6        JSR $08D6                  ; Print the object description
0C35: 35 04           PULS ,B                    ; Restore count
0C37: 20 D7           BRA $0C10                  ; Do all objects

;##GameFunction_24
; ===============================================
;
; GAME FUNCTION 24 (1) Move object N to current room.
;
MoveObjectNToCurrentRoom
;
0C39: 35 10           PULS ,X                 ; Current action
0C3B: B6 18 E5        LDa RoomNumber   ; (18E5) Current room
0C3E: B7 01 BC        STa $01BC               ; For find
0C41: A6 80           LDa ,X+                 ; Value
0C43: 34 10           PSHS ,X                 ; New action cursor
0C45: BD 06 90        JSR MoveObject          ; (0690) Move object to new location
0C48: 7E 06 CB        JMP FuncPassed  ; (06CB) Continue processing

;##GameFunction_25
; ===============================================
;
; GAME FUNCTION 25 (2) Morph object A into object B and print OK.
;
MorphObjectNIntoP
;
0C4B: 35 10           PULS ,X     ; Get old object number and new object number
0C4D: EC 81           LDD ,X++    ; ... from cursor
0C4F: 34 10           PSHS ,X     ; New cursor
0C51: F7 01 BB        STb $01BB   ; Hold this
0C54: 8E 18 8D        LDX #$188D  ; Object table
0C57: BD 06 7C        JSR $067C   ; * 2
0C5A: A6 84           LDa ,X      ; Object data
0C5C: 8A 80           ORa #$80    ; Flag morph
0C5E: A7 80           STa ,X+     ; Change object
0C60: F6 01 BB        LDb $01BB   ; Morph-to number
0C63: E7 84           STb ,X      ; Change object's type
0C65: 7E 0D E8        JMP $0DE8   ; Print "OK" and pass.

;##GameFunction_2
; ===============================================
;
; GAME FUNCTION 2 (1) Make sure object is in pack
;
AssertObjectNIsInPack
;
0C68: 35 10           PULS ,X                 ; Action cursor
0C6A: A6 80           LDa ,X+                 ; Get value
0C6C: 34 10           PSHS ,X                 ; Update cursor
0C6E: C6 FF           LDb #$FF                ; Backpack value
0C70: F7 01 BC        STb $01BC               ; For find
0C73: BD 06 66        JSR GetObjectInfo       ; (0666) Get object
0C76: 27 03           BEQ $0C7B               ; Got it
0C78: 7E 06 DF        JMP FuncFailed  ; (06DF) Invalid
0C7B: 7E 06 CB        JMP FuncPassed  ; (06CB) Valid

;##GameFunction_3
; ===============================================
;
; GAME FUNCTION 3 (1) Make sure object is in room or pack
;
AssertObjectNIsInCurrentRoomOrPack
;
0C7E: 35 10           PULS ,X               ; Action cursor
0C80: A6 80           LDa ,X+               ; Get target object
0C82: 34 10           PSHS ,X               ; Update cursor
0C84: B7 01 BB        STa $01BB             ; Hold this
0C87: F6 18 E5        LDb RoomNumber ; (18E5) Current room
0C8A: F7 01 BC        STb $01BC             ; For find
0C8D: BD 06 66        JSR GetObjectInfo     ; (0666) Check for object in room
0C90: 27 E9           BEQ $0C7B             ; Found it
0C92: B6 01 BB        LDa $01BB             ; Try ...
0C95: 20 D7           BRA $0C6E             ; ... backpack

;##GameFunction_26
; ===============================================
;
; GAME FUNCTION 26 (1) Make sure object N is in room
;
AssertObjectNIsInCurrentRoom
;
0C97: 35 10           PULS ,X                ; Action cursor
0C99: B6 18 E5        LDa RoomNumber  ; (18E5) Current room
0C9C: B7 01 BC        STa $01BC              ; For find routine
0C9F: A6 80           LDa ,X+                ; Get object
0CA1: 34 10           PSHS ,X                ; Update cursor
0CA3: BD 06 66        JSR GetObjectInfo      ; (0666) Check for object in room
0CA6: 27 D3           BEQ $0C7B              ; OK ... it's here
0CA8: 7E 06 DF        JMP FuncFailed ; (06DF) Invalid

;##GameFunction_13
; ===============================================
;
; GAME FUNCTION 13 (0) Make sure pack is empty (except for the vase-on-pillow)
;
AssertPackIsEmptyExceptForVase
;
0CAB: 8E 18 8D        LDX #$188D             ; Object data
0CAE: C6 01           LDb #$01               ; First object
0CB0: 30 01           LEAX +$01,X            ; Point to room location
0CB2: C1 1F           CMPb #$1F              ; This is the "vase on a pillow" object
0CB4: 27 06           BEQ $0CBC              ; Don't check that object
0CB6: A6 84           LDa ,X                 ; Get location
0CB8: 81 FF           CMPa #$FF              ; In backpack?
0CBA: 27 EC           BEQ $0CA8              ; Yes ... fail
0CBC: 30 01           LEAX +$01,X            ; Next object pointer
0CBE: 5C              INCb                   ; Next object
0CBF: C1 2D           CMPb #$2D              ; Done them all?
0CC1: 26 ED           BNE $0CB0              ; No ... go back
0CC3: 7E 06 CB        JMP FuncPassed         ; (06CB) 

;##GameFunction_10
; ===============================================
;
; GAME FUNCTION 10 (1) Assert that random count is greater than N. 
; Print "You have crawled" if pass.
;
AssertRandomIsGreaterThanN
;
0CC6: 35 10           PULS ,X                ; Cursor
0CC8: E6 80           LDb ,X+                ; Comparrison threshold
0CCA: 34 10           PSHS ,X                ; Update cursor
0CCC: F1 01 EB        CMPb RndCount ; (01EB) Random number
0CCF: 23 03           BLS $0CD4              ; Crossed threshold ... success!
0CD1: 7E 06 DF        JMP FuncFailed ; (06DF) Didn't cross threshold ... failure!
0CD4: 8E 31 AC        LDX #$31AC             ; "You have crawled around in some little holes ..."
0CD7: BD 08 D6        JSR $08D6              ; Print message
0CDA: BD 0B D2        JSR $0BD2              ; Print room description
0CDD: 7E 06 CB        JMP FuncPassed ; (06CB) OK

;##GameFunction_12
; ===============================================
;
; GAME FUNCTION 12 (1) Move to room N if last room is room N
;
MoveToRoomNIfItWasLastRoom
;
0CE0: 35 10           PULS ,X              ; Get cursor
0CE2: E6 80           LDb ,X+              ; Target room
0CE4: 34 10           PSHS ,X              ; Update cursor
0CE6: F1 18 EA        CMPb LastRoomNumber  ; (18EA) Did we just come from there?
0CE9: 26 E6           BNE $0CD1            ; No ... fail
0CEB: 35 10           PULS ,X              ; Cursor
0CED: 30 1F           LEAX -$01,X          ; Back it ..
0CEF: 34 10           PSHS ,X              ; ... up
0CF1: 7E 0B 05        JMP $0B05            ; Move to room N

;##GameFunction_22
; ===============================================
;
; GAME FUNCTION 22 (0) Get user input object if not in pack
; The function passes even if already in pack
;
GetUserInputObject
;
0CF4: 86 FF           LDa #$FF               ; Pack value
0CF6: B7 01 BC        STa $01BC              ; For find
0CF9: B6 01 E7        LDa Noun              ; (01E7) Object from input (noun)
0CFC: BD 06 66        JSR GetObjectInfo      ; (0666) Is it already in our pack?
0CFF: 26 09           BNE $0D0A              ; Not in our pack ... pick it up
0D01: 8E 34 0B        LDX #$340B             ; "You are already carying it"
0D04: BD 08 D6        JSR $08D6              ; Print message
0D07: 7E 06 CB        JMP FuncPassed ; (06CB) Passed
0D0A: F6 01 E7        LDb Noun              ; (01E7) Requested object
0D0D: 7E 0D AC        JMP $0DAC              ; Pick up object

;##GameFunction_4
; ===============================================
;
; GAME FUNCTION 4 (2) Print message
;
PrintMessageNN
;
0D10: 35 20           PULS ,Y                ; Get cursor
0D12: AE A1           LDX ,Y++               ; Get address of message
0D14: 34 20           PSHS ,Y                ; Update cursor
0D16: BD 08 D6        JSR $08D6              ; Print message
0D19: 7E 06 CB        JMP FuncPassed ; (06CB) Pass

;##GameFunction_11
; ===============================================
;
; GAME FUNCTION 11 (1) Drop object N FN_DropObject
;
DropObjectN
;
0D1C: 35 10           PULS ,X                   ; Get object ...
0D1E: E6 80           LDb ,X+                   ; ... from cursor
0D20: 34 10           PSHS ,X                   ; Restore cursor
0D22: 7A 18 EB        DEC NumInPack ; (18EB) No longer in our pack
0D25: B6 18 E5        LDa RoomNumber     ; (18E5) Where the object is going
0D28: B7 01 BC        STa $01BC                 ; For the move
0D2B: 1F 98           TFR B,A                   ; FOr the move
0D2D: BD 06 90        JSR MoveObject            ; (0690) Drop object in current room
0D30: 7E 0D E8        JMP $0DE8                 ; OK and out

;##GameFunction_14
; ===============================================
;
; GAME FUNCTION 14 (0) Move to last room
;
MoveToLastRoom
;
0D33: F6 18 EA        LDb LastRoomNumber     ; (18EA) Last room number
0D36: 27 0C           BEQ $0D44              ; There was no last ... error message
0D38: F7 01 BB        STb $01BB              ; Hold this
0D3B: B6 18 E5        LDa RoomNumber  ; (18E5) Current room ...
0D3E: B7 18 EA        STa LastRoomNumber     ; (18EA) ... is now last-room-number
0D41: 7E 0B 65        JMP $0B65              ; MoveToRoom ... past the room-number-update
0D44: 8E 33 DE        LDX #$33DE             ; "I don't remember how you got here ..."
0D47: BD 08 D6        JSR $08D6              ; Print message
0D4A: 7E 06 CB        JMP FuncPassed ; (06CB) Pass

;##GameFunction_15
; ===============================================
;
; GAME FUNCTION 15 (0) Print inventory
;
PrintInventory
;
0D4D: B6 18 EB        LDa NumInPack ; (18EB) Do we even have anything?
0D50: 26 09           BNE $0D5B                 ; Yes ... there is something
0D52: 8E 34 4F        LDX #$344F                ; "You're not carrying anything."
0D55: BD 08 D6        JSR $08D6                 ; Print message
0D58: 7E 06 CB        JMP FuncPassed    ; (06CB) pass
;
0D5B: 8E 34 65        LDX #$3465        ; "You are currently holding the following:"
0D5E: BD 08 D6        JSR $08D6         ; Print message
0D61: 5F              CLRb              ; Starting before object 1
0D62: 86 FF           LDa #$FF          ; Pack value
0D64: B7 01 BC        STa $01BC         ; For find
0D67: 5C              INCb              ; Next object
0D68: 1F 98           TFR B,A           ; To A
0D6A: 81 2D           CMPa #$2D         ; Have we checked every object?
0D6C: 24 DC           BCC $0D4A         ; Yes ... out
0D6E: 34 04           PSHS ,B           ; Hold it
0D70: BD 06 66        JSR GetObjectInfo ; (0666) Find the objet
0D73: 35 04           PULS ,B           ; Restore it
0D75: 26 EB           BNE $0D62         ; Not in the backpack ... check the others
0D77: 1F 98           TFR B,A           ; To A
0D79: 8E 18 ED        LDX #$18ED        ; Object descriptions
0D7C: 34 04           PSHS ,B           ; Hold it
0D7E: BD 06 7C        JSR $067C         ; Offset to object description
0D81: 35 04           PULS ,B           ; Restore
0D83: AE 84           LDX ,X            ; Pointer to 1st in message pair
0D85: A6 80           LDa ,X+           ; Find second ...
0D87: 26 FC           BNE $0D85         ; ... message
0D89: 34 04           PSHS ,B           ; Hold object number
0D8B: BD 08 D6        JSR $08D6         ; Print object description
0D8E: 35 04           PULS ,B           ; Restore object number
0D90: 20 D0           BRA $0D62         ; Do all objects

;##GameFunction_16
; ===============================================
;
; GAME FUNCTION 16 (0) Print room description
;
PrintRoomDescription
;
0D92: BD 0B D2        JSR $0BD2   ; Print room description
0D95: 7E 06 CB        JMP FuncPassed ;(06CB) 

;##GameFunction_17
; ===============================================
;
; GAME FUNCTION 17 (1) Make sure user input matches object N
;
AssertObjectNMatchesUserInput:
;
0D98: 35 10           PULS ,X                ; Get the object ...
0D9A: E6 80           LDb ,X+                ; ... from the cursor
0D9C: 34 10           PSHS ,X                ; Update cursor
0D9E: F1 01 E7        CMPb Noun             ; (01E7) Same as user input?
0DA1: 27 F2           BEQ $0D95              ; Yes ... pass
0DA3: 7E 06 DF        JMP FuncFailed ; (06DF) Fail

;##GameFunction_18
; ===============================================
;
; GAME FUNCTION 18 (1) Get object N from room
; Pack only holds 8 things.
; Some objects are flagged as "non pick-up-able"
;
GetObjectFromRoom:
;
0DA6: 35 10           PULS ,X                   ; Get the object's description from the ...
0DA8: E6 80           LDb ,X+                   ; ... cursor
0DAA: 34 10           PSHS ,X                   ; Update the cursor
0DAC: 1F 98           TFR B,A                   ; Needed here by GetObjectInfo
0DAE: F7 01 BB        STb $01BB                 ; Need again in a moment
0DB1: BD 06 66        JSR GetObjectInfo         ; (0666) Find the object
0DB4: A6 84           LDa ,X                    ; Object info
0DB6: 84 40           ANDa #$40                 ; OK to pick up?
0DB8: 26 09           BNE $0DC3                 ; Yes ... keep going
0DBA: 8E 34 82        LDX #$3482                ; "Don't be rediculous."
0DBD: BD 08 D6        JSR $08D6                 ; Print message
0DC0: 7E 06 CB        JMP FuncPassed    ; (06CB) Done
0DC3: B6 18 EB        LDa NumInPack ; (18EB) How many do we have?
0DC6: 81 08           CMPa #$08                 ; Already got 8 things?
0DC8: 25 08           BCS $0DD2                 ; We got less ... go on and take it
0DCA: 8E 34 20        LDX #$3420                ; "You can't carry anything more."
0DCD: BD 08 D6        JSR $08D6                 ; Print message
0DD0: 20 EE           BRA $0DC0                 ; And out
0DD2: 7C 18 EB        INC NumInPack ; (18EB) Got another one
0DD5: 86 FF           LDa #$FF                  ; Pack value
0DD7: B7 01 BC        STa $01BC                 ; For function
0DDA: B6 01 BB        LDa $01BB                 ; Object number
0DDD: BD 06 90        JSR MoveObject            ; (0690) Move object
0DE0: 20 06           BRA $0DE8                 ; Print "OK" and out

;##GameFunction_23
; ===============================================
;
; GAME FUNCTION 23 (0) Drop user input object
;
DropUserInputObject
;
0DE2: F6 01 E7        LDb Noun   ; (01E7) Value from user word
0DE5: 7E 0D 22        JMP $0D22   ; Drop object

;##GameFunction_20
; ===============================================
;
; GAME FUNCTION 20 (0) Print OK
;
PrintOK
;
0DE8: 8E 33 DA        LDX #$33DA  ; "OK"
0DEB: BD 08 D6        JSR $08D6   ; Print message
0DEE: 7E 06 CB        JMP FuncPassed ; (06CB) 

;##GameFunction_21
; ===============================================
;
; GAME FUNCTION 21 (2) FUNCTION Unmorph object
;
UnmorphObjectNToRoomP
;
0DF1: 35 10           PULS ,X    ; Cursor
0DF3: EC 81           LDD ,X++   ; Get object number and room number
0DF5: 34 10           PSHS ,X    ; Update cursor
0DF7: F7 01 BC        STb $01BC  ; Hold for a second
0DFA: 8E 18 8D        LDX #$188D ; Object table
0DFD: BD 06 7C        JSR $067C  ; Offset
0E00: A6 84           LDa ,X     ; Object data
0E02: 84 7F           ANDa #$7F  ; Trun off ...
0E04: A7 80           STa ,X+    ; ... morph bit
0E06: B6 01 BC        LDa $01BC  ; New location
0E09: A7 84           STa ,X     ; Update object location
0E0B: 20 E1           BRA $0DEE  ; Pass

;##PrintScore
; Print score
;
0E0D: 7F 02 08        CLR $0208   ; Calculated score LSB
0E10: 7F 02 09        CLR $0209   ; Calculated score MSB
0E13: 8E 18 8D        LDX #$188D  ; Object data
0E16: C6 2C           LDb #$2C    ; Object ...
0E18: F7 01 BA        STb $01BA   ; ... count
0E1B: E6 80           LDb ,X+     ; Get object data
0E1D: C4 20           ANDb #$20   ; Is it a treasure object?
0E1F: 27 1E           BEQ $0E3F   ; No ... skip
0E21: 86 20           LDa #$20    ; 20 points (BCD) ...
0E23: E6 84           LDb ,X      ; ... if object ...
0E25: C1 02           CMPb #$02   ; ... is at ...
0E27: 27 06           BEQ $0E2F   ; ... pyramid entrance
0E29: C1 FF           CMPb #$FF   ; 5 points ...
0E2B: 26 12           BNE $0E3F   ; ... if object ...
0E2D: 86 05           LDa #$05    ; ... is in pack
0E2F: BB 02 08        ADDa $0208  ; Add to ...
0E32: 19              DAA         ; ... BCD ...
0E33: B7 02 08        STa $0208   ; ... score
0E36: B6 02 09        LDa $0209   ; Extend ...
0E39: 89 00           ADCa #$00   ; ... overflow ...
0E3B: 19              DAA         ; ... into ...
0E3C: B7 02 09        STa $0209   ; ... MSB
0E3F: 30 01           LEAX +$01,X ; Next obect
0E41: 7A 01 BA        DEC $01BA   ; All tested?
0E44: 26 D5           BNE $0E1B   ; Keep testing
0E46: 86 20           LDa #$20    ; Space ..
0E48: B7 10 41        STa $1041   ; ... in message.
0E4B: 8E 10 42        LDX #$1042         ; Spot for score in message
0E4E: B6 02 09        LDa $0209          ; Calculated score MSB
0E51: BD 0E 6F        JSR $0E6F          ; Add 2 digits
0E54: B6 02 08        LDa $0208          ; Calculated score LSB
0E57: BD 0E 6F        JSR $0E6F          ; Add two digits
0E5A: 8E 10 5A        LDX #$105A         ; Spot for turn count in message
0E5D: B6 18 E6        LDa TurnCountMSB   ; (18E6) Store MSB ...
0E60: BD 0E 6F        JSR $0E6F          ; ... two digits in buffer
0E63: B6 18 E7        LDa TurnCountLSB   ; (18E7) Store LSB ...
0E66: BD 0E 6F        JSR $0E6F          ; ... two digits in buffer
0E69: 8E 10 36        LDX #$1036         ; "YOU SCORED **** OUT OF 0220, USING *** TURNS."
0E6C: 7E 08 FC        JMP $08FC          ; Print message and return
;
; Two digit BCD to ASCII
0E6F: 1F 89           TFR A,B    ; Value to A
0E71: 47              ASRa       ; First ...
0E72: 47              ASRa       ; ... the ...
0E73: 47              ASRa       ; ... upper ...
0E74: 47              ASRa       ; Digit
0E75: BD 0E 7A        JSR $0E7A  ; Convert it
0E78: 1F 98           TFR B,A    ; Original back ... do lower digit
0E7A: 84 0F           ANDa #$0F  ; Only lower 4 bits
0E7C: 8B 30           ADDa #$30  ; Convert to ASCII number
0E7E: A7 80           STa ,X+    ; Store character in buffer
0E80: 39              RTS        ; Done


;##GameFunction_28
; ===============================================
;
; GAME FUNCTION 28 (0) Save game
;
SaveGame
;
0E81: 8E 3C 27        LDX #$3C27  ; "Ready Cassette"
0E84: BD 08 D6        JSR $08D6   ; Print message
0E87: BD 09 37        JSR $0937   ; Get a key
0E8A: 81 08           CMPa #$08   ; Backspace ... 
0E8C: 27 2A           BEQ $0EB8   ; ... abort
0E8E: 81 0D           CMPa #$0D   ; Wait ...
0E90: 26 F5           BNE $0E87   ; ... for ENTER or BACKSPACE
0E92: AD 9F A0 0C     JSR [$A00C] ; Turn on cassette and write leader
0E96: 86 01           LDa #$01    ; Block ...
0E98: 97 7C           STa $7C     ; ... type 1
0E9A: 86 82           LDa #$82    ; Write ...
0E9C: 97 7D           STa $7D     ; ... 0x82 bytes
0E9E: 8E 17 EB        LDX #$17EB  ; Start at ...
0EA1: 9F 7E           STX $7E     ; ... transient data
0EA3: AD 9F A0 08     JSR [$A008] ; Write to tape
0EA7: 9F 7E           STX $7E     ; Continue where we left off
0EA9: 86 01           LDa #$01    ; Block ...
0EAB: 97 7C           STa $7C     ; ... type 1
0EAD: 86 82           LDa #$82    ; Write ...
0EAF: 97 7D           STa $7D     ; ... 0x82 bytes
0EB1: AD 9F A0 08     JSR [$A008] ; Write to tape
0EB5: BD 0F 0C        JSR $0F0C   ; Turn motor off
0EB8: 7E 06 CB        JMP FuncPassed ; (06CB) 

;##GameFunction_27
; ===============================================
;
; GAME FUNCTION 27 (0) Load game
;
LoadGame
;
0EBB: 8E 3C 27        LDX #$3C27  ; "Ready Cassette"
0EBE: BD 08 D6        JSR $08D6   ; Print message
0EC1: BD 09 37        JSR $0937   ; Wait on a key
0EC4: 81 08           CMPa #$08   ; Backspace ...
0EC6: 27 F0           BEQ $0EB8   ; ... abort
0EC8: 81 0D           CMPa #$0D   ; Wait ...
0ECA: 26 F5           BNE $0EC1   ; ... for enter or abort
0ECC: AD 9F A0 04     JSR [$A004] ; Start cassette and sync
0ED0: 8E 17 EB        LDX #$17EB  ; Start at ...
0ED3: 9F 7E           STX $7E     ; ... transient data
0ED5: 86 01           LDa #$01    ; Block ...
0ED7: 97 7C           STa $7C     ; ... type 1
0ED9: 86 82           LDa #$82    ; Read ...
0EDB: 97 7D           STa $7D     ; ... 0x82 bytes
0EDD: AD 9F A0 06     JSR [$A006] ; Read from tape
0EE1: 26 1D           BNE $0F00   ; Error ... report and try again
0EE3: 9F 7E           STX $7E     ; Keep going
0EE5: 86 01           LDa #$01    ; Block ...
0EE7: 97 7C           STa $7C     ; ... type 1
0EE9: 86 82           LDa #$82    ; Read ...
0EEB: 97 7D           STa $7D     ; ... 0x82 bytes
0EED: AD 9F A0 06     JSR [$A006] ; Read from tape
0EF1: 26 0D           BNE $0F00   ; Error ... report and try again
0EF3: BD 0F 0C        JSR $0F0C   ; Stop motor
0EF6: BD 0B D2        JSR $0BD2   ; Print room description
0EF9: 10 CE 03 FF     LDS #$03FF   ; Reset stack ...
0EFD: 7E 06 35        JMP $0635    ; ... and pickup at top of game loop
0F00: BD 0F 0C        JSR $0F0C    ; Turn motor off
0F03: 8E 3C 33        LDX #$3C33   ; "Checksum Error"
0F06: BD 08 D6        JSR $08D6    ; Print messagge
0F09: 7E 0E BB        JMP $0EBB    ; Try again
0F0C: 86 34           LDa #$34     ; Motor ...
0F0E: B7 FF 21        STa $FF21    ; ... off
0F11: 39              RTS        ;

;##GameFunction_8
; ===============================================
;
; GAME FUNCTION 8 (0) Print score
;
PrintScore
;
0F12: BD 0E 0D        JSR $0E0D    ; Print score
0F15: 7E 06 CB        JMP FuncPassed ; (06CB) 

;##GameFunction_5_9
; ===============================================
;
; GAME FUNCTION 5,9 (0) Print score and endless loop
;
PrintScoreAndStop:
;
0F18: BD 0E 0D        JSR $0E0D   ; Print score
0F1B: 20 FE           BRA $0F1B   ; Endless loop

;##GameFunction_29
; ===============================================
;
; GAME FUNCTION 29 (0) Stop current processing and go to top of game loop
;
JumpToTopOfGameLoop:
;
0F1D: 10 CE 03 FF     LDS #$03FF  ; Forget where we came from ...
0F21: 7E 06 35        JMP $0635   ; ... and go back to top of game loop

;##ErrorMessages
; Error text

; Alternating messages
0F24: 0F CA  ; Pointer to "WHAT?"
0F26: 0F D1  ; Pointer to "I DON'T KNOW THAT WORD."
0F28: 0F E9  ; Pointer to "I DON'T UNDERSTAND."
0F2A: 0F FD  ; Pointer to "I DON'T KNOW WHAT YOU MEAN."

0F2C:   .DB  "I SEE NO ",1
0F36:   .DB  " HERE.",0
0F3D:   .DB  "YOUR AREN'T CARRYING IT.",0
0F55:   .DB  "WHAT DO YOU WANT ME TO DO WITH THE "

0F78: 00 00 00 00 00 00 00 00 7E FF 
0F82: FF FF FF FF FF FF FF FF FF FF  ; 40 byte buffer filled with object and 
0F8C: FF FF FF FF FF FF FF FF FF FF  ; padded with ignored '@' on the end
0F96: FF FF FF FF FF FF FF FF FF FF 
0FA0: 3F 00 ; '?' 

0FA2: FF FF FF FF FF FF FF FF FF FF 
      FF FF FF FF FF FF FF FF FF FF  ; 40 byte buffer filled with verb and
      FF FF FF FF FF FF FF FF FF FF  ; padded with ignored '@' on the end      
0FC0: 00 00 00 00 00 00 00 00 00 00          

0FCA:   .DB  " WHAT?",0

0FD1:   .DB  "I DON'T KNOW THAT WORD.",0
0FE9:   .DB  "I DON'T UNDERSTAND.",0
0FFD:   .DB  "I DON'T KNOW WHAT YOU MEAN.",0
1019:   .DB  " <MORE>",1
1021:   .DB  "WELCOME TO PYRAMID!!",0
1036:   .DB  "YOU SCORED "
1041:   .DB  "**** OUT OF 0220, USING "
1059:   .DB  "**** TURNS.",0


;##UnpackMessage
; Unpack message pointed to by X and print to screen. A = loop count (number of 2 bytes).
; Every 2 bytes holds 3 characters. Each character can be from 0 to 39.
; 40*40*40 = 64000 ... totally ingenious.
;
1066: B7 01 C1        STa $01C1    ; 
1069: 86 01           LDa #$01 ;
106B: B7 01 C5        STa $01C5 ;
106E: 10 8E 02 04     LDY #$0204 ;
1072: C6 03           LDb #$03 ;
1074: F7 01 C2        STb $01C2 ;
1077: A6 80           LDa ,X+      ; Next in message
1079: B7 01 FE        STa $01FE    ; Save it
107C: A6 80           LDa ,X+      ; Next in message
107E: B7 01 FD        STa $01FD    ; Save it
1081: 31 23           LEAY +$03,Y ;
1083: CE 00 28        LDU #$0028   ; Number of characters in map
1086: FF 01 C3        STU $01C3 ;
1089: 86 11           LDa #$11     ; 17 passes
108B: B7 02 03        STa $0203  ;  
108E: 7F 01 FF        CLR $01FF    ; 
1091: 7F 02 00        CLR $0200    ; 
1094: 79 01 FE        ROL $01FE ;
1097: 79 01 FD        ROL $01FD ;
109A: 7A 02 03        DEC $0203    ; All 17 shifts done? (Doesn't change C)
109D: 27 39           BEQ $10D8    ; Yes ... print the extracted character
109F: 86 00           LDa #$00     ; Start with 0 (Doesn't change C)
10A1: 89 00           ADCa #$00    ; Add in carry from  ROL
10A3: 78 02 00        LSL $0200 ;
10A6: 79 01 FF        ROL $01FF ;
10A9: BB 02 00        ADDa $0200 ;
10AC: B0 01 C4        SUBa $01C4 ;
10AF: B7 02 02        STa $0202 ;
10B2: B6 01 FF        LDa $01FF ;
10B5: B2 01 C3        SBCa $01C3 ;
10B8: B7 02 01        STa $0201 ;
10BB: 24 0B           BCC $10C8 ;
10BD: FC 02 01        LDD $0201 ;
10C0: F3 01 C3        ADDD $01C3 ;
10C3: FD 01 FF        STD $01FF ;
10C6: 20 06           BRA $10CE ;
10C8: FC 02 01        LDD $0201 ;
10CB: FD 01 FF        STD $01FF ;
; Compliment C flag and continue
10CE: 25 04           BCS $10D4 ;
10D0: 1A 01           ORCC #$01     ; Clear carry ...
10D2: 20 C0           BRA $1094     ; ... and continue
10D4: 1C FE           ANDCC #$FE    ; Set carry ...
10D6: 20 BC           BRA $1094     ; ... and continue
; Process the result of the division
10D8: FC 01 FF        LDD $01FF     ; Character (0 in MSB)
10DB: C3 11 06        ADDd #$1106   ; Offset into character map
10DE: 1F 03           TFR D,U       ; Get character ...
10E0: A6 C4           LDa ,U        ; ... from map
10E2: A7 A2           STa ,-Y       ; Stuff into buffer
10E4: 7A 01 C2        DEC $01C2     ; Do all ...
10E7: 26 9A           BNE $1083     ; ... three characters
10E9: 10 8E 02 04     LDY #$0204    ; Expansion buffer
10ED: C6 03           LDb #$03      ; 3 characters
10EF: A6 A0           LDa ,Y+       ; Get next byte
10F1: 34 04           PSHS ,B       ; Save B
10F3: BD 09 45        JSR $0945     ; Print A to screen
10F6: 35 04           PULS ,B       ; Restore B
10F8: 5A              DECb          ; All 3 done?
10F9: 26 F4           BNE $10EF     ; Do all 3
10FB: 7A 01 C1        DEC $01C1     ; Do all loops
10FE: 10 26 FF 6C     LBNE $106E    ; Go back to top
1102: FC 01 BA        LDD $01BA ;
1105: 39              RTS ;




















; Game data from here down ....


; Character translation table

;     ?  !  2  .  "  '  <  >  /  0  3  A  B  C  D  E
1106: 3F 21 32 20 22 27 3C 3E 2F 30 33 41 42 43 44 45
;     F  G  H  I  J  K  L  M  N  O  P  Q  R  S  T  U
      46 47 48 49 4A 4B 4C 4D 4E 4F 50 51 52 53 54 55
;     V  W  X  Y  Z  -  ,  .
      56 57 58 59 5A 2D 2C 2E 

; 4-byte room structures

; DD DD FF FF
; DDDD = Description string
; FFFF = something to do with functions
;
; 81 rooms

L112E: 
RoomStructure:

  .DW     RoomDescription_1
    .DW   0x1272
  .DW     RoomDescription_2
    .DW   0x1287
  .DW     RoomDescription_3
    .DW   0x1298
  .DW     RoomDescription_4
    .DW   0x12a9
  .DW     RoomDescription_5
    .DW   0x12ba
  .DW     RoomDescription_6
    .DW   0x12cb
  .DW     RoomDescription_7
    .DW   0x12dc
  .DW     RoomDescription_8
    .DW   0x12ed
  .DW     RoomDescription_9
    .DW   0x12fe
  .DW     RoomDescription_10
    .DW   0x130f
  .DW     RoomDescription_11
    .DW   0x1324
  .DW     RoomDescription_12
    .DW   0x132d
  .DW     RoomDescription_13
    .DW   0x1343
  .DW     RoomDescription_14
    .DW   0x136e
  .DW     RoomDescription_15
    .DW   0x1377
  .DW     RoomDescription_16
    .DW   0x13b3
  .DW     RoomDescription_17
    .DW   0x13ee
  .DW     RoomDescription_18
    .DW   0x13f7
  .DW     RoomDescription_19
    .DW   0x1436
  .DW     RoomDescription_20
    .DW   0x144f
  .DW     RoomDescription_21
    .DW   0x1464
  .DW     RoomDescription_22
    .DW   0x146d
  .DW     RoomDescription_23
    .DW   0x147e
  .DW     RoomDescription_24
    .DW   0x1487
  .DW     RoomDescription_25
    .DW   0x1498
  .DW     RoomDescription_26
    .DW   0x14ad
  .DW     RoomDescription_27
    .DW   0x14ba
  .DW     RoomDescription_28
    .DW   0x14c7
  .DW     RoomDescription_29
    .DW   0x14dc
  .DW     RoomDescription_30
    .DW   0x14ed
  .DW     RoomDescription_31
    .DW   0x1506
  .DW     RoomDescription_32
    .DW   0x150f
  .DW     RoomDescription_33
    .DW   0x151c
  .DW     RoomDescription_34
    .DW   0x152d
  .DW     RoomDescription_35
    .DW   0x153e
  .DW     RoomDescription_36
    .DW   0x1557
  .DW     RoomDescription_37
    .DW   0x1568
  .DW     RoomDescription_38
    .DW   0x1571
  .DW     RoomDescription_39
    .DW   0x1582
  .DW     RoomDescription_40
    .DW   0x158f
  .DW     RoomDescription_41
    .DW   0x159c
  .DW     RoomDescription_42
    .DW   0x15a9
  .DW     RoomDescription_43
    .DW   0x15ae
  .DW     RoomDescription_44
    .DW   0x15b3
  .DW     RoomDescription_45
    .DW   0x15b8
  .DW     RoomDescription_46
    .DW   0x15bd
  .DW     RoomDescription_47
    .DW   0x15c2
  .DW     RoomDescription_48
    .DW   0x15c7
  .DW     RoomDescription_49
    .DW   0x15cc
  .DW     RoomDescription_50
    .DW   0x15d1
  .DW     RoomDescription_51
    .DW   0x15d6
  .DW     RoomDescription_52
    .DW   0x15e7
  .DW     RoomDescription_53
    .DW   0x15fc
  .DW     RoomDescription_54
    .DW   0x1601
  .DW     RoomDescription_55
    .DW   0x160e
  .DW     RoomDescription_56
    .DW   0x161b
  .DW     RoomDescription_57
    .DW   0x1639
  .DW     RoomDescription_58
    .DW   0x1642
  .DW     RoomDescription_59
    .DW   0x1657
  .DW     RoomDescription_60
    .DW   0x1664
  .DW     RoomDescription_61
    .DW   0x16ac
  .DW     RoomDescription_62
    .DW   0x16c7
  .DW     RoomDescription_63
    .DW   0x16d0
  .DW     RoomDescription_64
    .DW   0x16d9
  .DW     RoomDescription_65
    .DW   0x16e2
  .DW     RoomDescription_66
    .DW   0x170b
  .DW     RoomDescription_67
    .DW   0x0
  .DW     RoomDescription_68
    .DW   0x17e1
  .DW     RoomDescription_69
    .DW   0x0
  .DW     RoomDescription_70
    .DW   0x17d8
  .DW     RoomDescription_71
    .DW   0x17cb
  .DW     RoomDescription_72
    .DW   0x1714
  .DW     RoomDescription_73
    .DW   0x171d
  .DW     RoomDescription_74
    .DW   0x0
  .DW     RoomDescription_75
    .DW   0x0
  .DW     RoomDescription_76
    .DW   0x172c
  .DW     RoomDescription_77
    .DW   0x17b4
  .DW     RoomDescription_78
    .DW   0x1741
  .DW     RoomDescription_79
    .DW   0x174e
  .DW     RoomDescription_80
    .DW   0x1757
  .DW     RoomDescription_81
    .DW   0x1764

L1272:
RoomCommands_1
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x2          ;     MoveToRoomN  Room 2
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3          ;     MoveToRoomN  Room 3
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x4          ;     MoveToRoomN  Room 4
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x5          ;     MoveToRoomN  Room 5
  .DB 0xb, 0x3            ; IN,INSIDE
    .DB 0x1, 0x2          ;     MoveToRoomN  Room 2
  .DB 0x0
L1287:
RoomCommands_2
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x1          ;     MoveToRoomN  Room 1
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x7          ;     MoveToRoomN  Room 7
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x1          ;     MoveToRoomN  Room 1
  .DB 0x12, 0x3           ; PANEL
    .DB 0x1, 0x1a         ;     MoveToRoomN  Room 26
  .DB 0x0
L1298:
RoomCommands_3
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x6          ;     MoveToRoomN  Room 6
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3          ;     MoveToRoomN  Room 3
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x4          ;     MoveToRoomN  Room 4
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1          ;     MoveToRoomN  Room 1
  .DB 0x0
L12a9:
RoomCommands_4
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x1          ;     MoveToRoomN  Room 1
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3          ;     MoveToRoomN  Room 3
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x4          ;     MoveToRoomN  Room 4
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x5          ;     MoveToRoomN  Room 5
  .DB 0x0
L12ba:
RoomCommands_5
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x6          ;     MoveToRoomN  Room 6
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x1          ;     MoveToRoomN  Room 1
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x4          ;     MoveToRoomN  Room 4
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x5          ;     MoveToRoomN  Room 5
  .DB 0x0
L12cb:
RoomCommands_6
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x6          ;     MoveToRoomN  Room 6
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3          ;     MoveToRoomN  Room 3
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x1          ;     MoveToRoomN  Room 1
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x5          ;     MoveToRoomN  Room 5
  .DB 0x0
L12dc:
RoomCommands_7
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x2          ;     MoveToRoomN  Room 2
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x2          ;     MoveToRoomN  Room 2
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x8          ;     MoveToRoomN  Room 8
  .DB 0xb, 0x3            ; IN,INSIDE
    .DB 0x1, 0x8          ;     MoveToRoomN  Room 8
  .DB 0x0
L12ed:
RoomCommands_8
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x7          ;     MoveToRoomN  Room 7
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x7          ;     MoveToRoomN  Room 7
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x9          ;     MoveToRoomN  Room 9
  .DB 0xb, 0x3            ; IN,INSIDE
    .DB 0x1, 0x9          ;     MoveToRoomN  Room 9
  .DB 0x0
L12fe:
RoomCommands_9
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x8          ;     MoveToRoomN  Room 8
  .DB 0xb, 0x3            ; IN,INSIDE
    .DB 0x1, 0xa          ;     MoveToRoomN  Room 10
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0xa          ;     MoveToRoomN  Room 10
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0xa          ;     MoveToRoomN  Room 10
  .DB 0x0
L130f:
RoomCommands_10
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x9          ;     MoveToRoomN  Room 9
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x9          ;     MoveToRoomN  Room 9
  .DB 0xb, 0x3            ; IN,INSIDE
    .DB 0x1, 0xb          ;     MoveToRoomN  Room 11
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0xb          ;     MoveToRoomN  Room 11
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0xb          ;     MoveToRoomN  Room 11
  .DB 0x0
L1324:
RoomCommands_11
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0xa          ;     MoveToRoomN  Room 10
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0xc          ;     MoveToRoomN  Room 12
  .DB 0x0
L132d:
RoomCommands_12
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0xb          ;     MoveToRoomN  Room 11
  .DB 0xa, 0xb            ; D,DOWN
    .DB 0x7, 0x7          ;     SubScriptRev
      .DB 0x2, 0x25       ;       AssertObjectNIsInPack  Object "Gold Nugget"
      .DB 0x4, 0x30, 0x8a ;       PrintMessageNN "YOU ARE AT THE BOTTOM OF THE PIT WITH A BROKEN NECK."
      .DB 0x5             ;       PrintScoreAndStop
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x4, 0x4            ; W,WEST
    .DB 0x4, 0x30, 0xaf   ;     PrintMessageNN "THE CRACK IS FAR TOO SMALL FOR YOU TO FOLLOW."
  .DB 0x0
L1343:
RoomCommands_13
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0xe          ;     MoveToRoomN  Room 14
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0xf          ;     MoveToRoomN  Room 15
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0x9, 0xa            ; U,UP
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0x25       ;       AssertObjectNIsInPack  Object "Gold Nugget"
      .DB 0x4, 0x30, 0xcf ;       PrintMessageNN "THE DOME IS UNCLIMBABLE."
    .DB 0x1, 0xc          ;     MoveToRoomN  Room 12
  .DB 0x2, 0xa            ; E,EAST
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0x25       ;       AssertObjectNIsInPack  Object "Gold Nugget"
      .DB 0x4, 0x30, 0xcf ;       PrintMessageNN "THE DOME IS UNCLIMBABLE."
    .DB 0x1, 0xc          ;     MoveToRoomN  Room 12
  .DB 0x20, 0x3           ; ?UNKNOWN COMMAND?
    .DB 0x1, 0x1a         ;     MoveToRoomN  Room 26
  .DB 0x0
L136e:
RoomCommands_14
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x0
L1377:
RoomCommands_15
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x10, 0xc           ; JUMP
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x3, 0x1        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
      .DB 0x4, 0x30, 0xe1 ;       PrintMessageNN "I RESPECTFULLY SUGGEST YOU GO ACROSS THE BRIDGE INSTEAD OF JUMPING."
    .DB 0x4, 0x31, 0x10   ;     PrintMessageNN "YOU DIDN'T MAKE IT."
    .DB 0x5               ;     PrintScoreAndStop
  .DB 0x4, 0xa            ; W,WEST
    .DB 0x7, 0x5          ;     SubScriptRev
      .DB 0x3, 0x1        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
      .DB 0x1, 0x12       ;       MoveToRoomN  Room 18
    .DB 0x4, 0x31, 0x1f   ;     PrintMessageNN "THERE IS NO WAY ACROSS THE BOTTOMLESS PIT."
  .DB 0xd, 0x5            ; CROSS
    .DB 0x3, 0x1          ;     AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
    .DB 0x1, 0x12         ;     MoveToRoomN  Room 18
  .DB 0x23, 0x18          ; WAVE,SHAKE,SWING
    .DB 0x11, 0x11        ;     AssertObjectNMatchesUserInput  Object "Scepter"
    .DB 0x7, 0xc          ;     SubScriptRev
      .DB 0x3, 0x1        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
      .DB 0x15, 0x1, 0x0  ;       UnmorphObjectNToRoomP  Object "Stone bridge" Room 0
      .DB 0x15, 0x2, 0x0  ;       UnmorphObjectNToRoomP  Object "Stone bridge" Room 0
      .DB 0x4, 0x3a, 0x5e ;       PrintMessageNN "THE STONE BRIDGE HAS RETRACTED!"
    .DB 0x18, 0x1         ;     MoveObjectNToCurrentRoom  Object "Stone bridge"
    .DB 0x15, 0x2, 0x12   ;     UnmorphObjectNToRoomP  Object "Stone bridge" Room 18
    .DB 0x4, 0x3a, 0x75   ;     PrintMessageNN "A STONE BRIDGE NOW SPANS THE BOTTOMLESS PIT."
  .DB 0x0
L13b3:
RoomCommands_16
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x3, 0xa            ; S,SOUTH
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x3, 0xb        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Serpent bars the way"
      .DB 0x4, 0x31, 0x3d ;       PrintMessageNN "YOU CAN'T GET BY THE SERPENT."
    .DB 0x1, 0x11         ;     MoveToRoomN  Room 17
  .DB 0x1, 0xa            ; N,NORTH
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x3, 0xb        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Serpent bars the way"
      .DB 0x4, 0x31, 0x3d ;       PrintMessageNN "YOU CAN'T GET BY THE SERPENT."
    .DB 0x1, 0x19         ;     MoveToRoomN  Room 25
  .DB 0x4, 0xa            ; W,WEST
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x3, 0xb        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Serpent bars the way"
      .DB 0x4, 0x31, 0x3d ;       PrintMessageNN "YOU CAN'T GET BY THE SERPENT."
    .DB 0x1, 0x18         ;     MoveToRoomN  Room 24
  .DB 0x26, 0x10          ; THROW,TOSS
    .DB 0x11, 0x14        ;     AssertObjectNMatchesUserInput  Object "Statue in box"
    .DB 0x3, 0xb          ;     AssertObjectNIsInCurrentRoomOrPack  Object "Serpent bars the way"
    .DB 0x15, 0xb, 0x0    ;     UnmorphObjectNToRoomP  Object "Serpent bars the way" Room 0
    .DB 0x18, 0x13        ;     MoveObjectNToCurrentRoom  Object "Statue"
    .DB 0x15, 0x14, 0x0   ;     UnmorphObjectNToRoomP  Object "Statue in box" Room 0
    .DB 0x4, 0x3b, 0x21   ;     PrintMessageNN "THE BIRD STATUE COMES TO LIFE AND ATTACKS THE SERPENT AND IN AN ASTOUNDING FLURRY, DRIVES THE SERPENT AWAY. THE BIRD TURNS BACK INTO A STATUE."
  .DB 0x0
L13ee:
RoomCommands_17
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0x0
L13f7:
RoomCommands_18
  .DB 0x10, 0xc           ; JUMP
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x3, 0x2        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
      .DB 0x4, 0x30, 0xe1 ;       PrintMessageNN "I RESPECTFULLY SUGGEST YOU GO ACROSS THE BRIDGE INSTEAD OF JUMPING."
    .DB 0x4, 0x31, 0x10   ;     PrintMessageNN "YOU DIDN'T MAKE IT."
    .DB 0x5               ;     PrintScoreAndStop
  .DB 0x2, 0xa            ; E,EAST
    .DB 0x7, 0x5          ;     SubScriptRev
      .DB 0x3, 0x2        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
      .DB 0x1, 0xf        ;       MoveToRoomN  Room 15
    .DB 0x4, 0x31, 0x1f   ;     PrintMessageNN "THERE IS NO WAY ACROSS THE BOTTOMLESS PIT."
  .DB 0x1, 0x6            ; N,NORTH
    .DB 0x4, 0x31, 0x53   ;     PrintMessageNN "YOU HAVE CRAWLED THROUGH A VERY LOW WIDE PASSAGE PARALLEL TO AND NORTH OF THE HALL OF GODS."
    .DB 0x1, 0x13         ;     MoveToRoomN  Room 19
  .DB 0xd, 0x5            ; CROSS
    .DB 0x3, 0x2          ;     AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
    .DB 0x1, 0xf          ;     MoveToRoomN  Room 15
  .DB 0x23, 0x18          ; WAVE,SHAKE,SWING
    .DB 0x11, 0x11        ;     AssertObjectNMatchesUserInput  Object "Scepter"
    .DB 0x7, 0xc          ;     SubScriptRev
      .DB 0x3, 0x2        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Stone bridge"
      .DB 0x15, 0x2, 0x0  ;       UnmorphObjectNToRoomP  Object "Stone bridge" Room 0
      .DB 0x15, 0x1, 0x0  ;       UnmorphObjectNToRoomP  Object "Stone bridge" Room 0
      .DB 0x4, 0x3a, 0x5e ;       PrintMessageNN "THE STONE BRIDGE HAS RETRACTED!"
    .DB 0x18, 0x2         ;     MoveObjectNToCurrentRoom  Object "Stone bridge"
    .DB 0x15, 0x1, 0xf    ;     UnmorphObjectNToRoomP  Object "Stone bridge" Room 15
    .DB 0x4, 0x3a, 0x75   ;     PrintMessageNN "A STONE BRIDGE NOW SPANS THE BOTTOMLESS PIT."
  .DB 0x0
L1436:
RoomCommands_19
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x11, 0x3           ; CLIMB
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x12         ;     MoveToRoomN  Room 18
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x12         ;     MoveToRoomN  Room 18
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x14         ;     MoveToRoomN  Room 20
  .DB 0x0
L144f:
RoomCommands_20
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x13         ;     MoveToRoomN  Room 19
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x13         ;     MoveToRoomN  Room 19
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x15         ;     MoveToRoomN  Room 21
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0x0
L1464:
RoomCommands_21
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x14         ;     MoveToRoomN  Room 20
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0x0
L146d:
RoomCommands_22
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x14         ;     MoveToRoomN  Room 20
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x17         ;     MoveToRoomN  Room 23
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x18         ;     MoveToRoomN  Room 24
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x15         ;     MoveToRoomN  Room 21
  .DB 0x0
L147e:
RoomCommands_23
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0x0
L1487:
RoomCommands_24
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x16         ;     MoveToRoomN  Room 22
  .DB 0x0
L1498:
RoomCommands_25
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x10         ;     MoveToRoomN  Room 16
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x1a         ;     MoveToRoomN  Room 26
  .DB 0x20, 0x3           ; ?UNKNOWN COMMAND?
    .DB 0x1, 0x1a         ;     MoveToRoomN  Room 26
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x36         ;     MoveToRoomN  Room 54
  .DB 0x0
L14ad:
RoomCommands_26
  .DB 0x12, 0x3           ; PANEL
    .DB 0x1, 0x2          ;     MoveToRoomN  Room 2
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x19         ;     MoveToRoomN  Room 25
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x1b         ;     MoveToRoomN  Room 27
  .DB 0x0
L14ba:
RoomCommands_27
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x1a         ;     MoveToRoomN  Room 26
  .DB 0x20, 0x3           ; ?UNKNOWN COMMAND?
    .DB 0x1, 0x1a         ;     MoveToRoomN  Room 26
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0xd          ;     MoveToRoomN  Room 13
  .DB 0x0
L14c7:
RoomCommands_28
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x20         ;     MoveToRoomN  Room 32
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x1e         ;     MoveToRoomN  Room 30
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1d         ;     MoveToRoomN  Room 29
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x13         ;     MoveToRoomN  Room 19
  .DB 0x0
L14dc:
RoomCommands_29
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x33         ;     MoveToRoomN  Room 51
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x1d         ;     MoveToRoomN  Room 29
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1d         ;     MoveToRoomN  Room 29
  .DB 0x0
L14ed:
RoomCommands_30
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x20         ;     MoveToRoomN  Room 32
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x2a         ;     MoveToRoomN  Room 42
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x2b         ;     MoveToRoomN  Room 43
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x1f         ;     MoveToRoomN  Room 31
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x1f         ;     MoveToRoomN  Room 31
  .DB 0x0
L1506:
RoomCommands_31
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x1e         ;     MoveToRoomN  Room 30
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x1e         ;     MoveToRoomN  Room 30
  .DB 0x0
L150f:
RoomCommands_32
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x1e         ;     MoveToRoomN  Room 30
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x21         ;     MoveToRoomN  Room 33
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1c         ;     MoveToRoomN  Room 28
  .DB 0x0
L151c:
RoomCommands_33
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x2c         ;     MoveToRoomN  Room 44
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x20         ;     MoveToRoomN  Room 32
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x22         ;     MoveToRoomN  Room 34
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x2d         ;     MoveToRoomN  Room 45
  .DB 0x0
L152d:
RoomCommands_34
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x21         ;     MoveToRoomN  Room 33
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x23         ;     MoveToRoomN  Room 35
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x25         ;     MoveToRoomN  Room 37
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x26         ;     MoveToRoomN  Room 38
  .DB 0x0
L153e:
RoomCommands_35
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x24         ;     MoveToRoomN  Room 36
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x26         ;     MoveToRoomN  Room 38
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x23         ;     MoveToRoomN  Room 35
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x22         ;     MoveToRoomN  Room 34
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x27         ;     MoveToRoomN  Room 39
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x2f         ;     MoveToRoomN  Room 47
  .DB 0x0
L1557:
RoomCommands_36
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x24         ;     MoveToRoomN  Room 36
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x34         ;     MoveToRoomN  Room 52
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x23         ;     MoveToRoomN  Room 35
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x30         ;     MoveToRoomN  Room 48
  .DB 0x0
L1568:
RoomCommands_37
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x22         ;     MoveToRoomN  Room 34
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x26         ;     MoveToRoomN  Room 38
  .DB 0x0
L1571:
RoomCommands_38
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x23         ;     MoveToRoomN  Room 35
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x27         ;     MoveToRoomN  Room 39
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x25         ;     MoveToRoomN  Room 37
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x22         ;     MoveToRoomN  Room 34
  .DB 0x0
L1582:
RoomCommands_39
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x23         ;     MoveToRoomN  Room 35
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x2e         ;     MoveToRoomN  Room 46
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x26         ;     MoveToRoomN  Room 38
  .DB 0x0
L158f:
RoomCommands_40
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x34         ;     MoveToRoomN  Room 52
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x29         ;     MoveToRoomN  Room 41
  .DB 0x8, 0x3            ; NW,NORTHW
    .DB 0x1, 0x35         ;     MoveToRoomN  Room 53
  .DB 0x0
L159c:
RoomCommands_41
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x28         ;     MoveToRoomN  Room 40
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x34         ;     MoveToRoomN  Room 52
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x32         ;     MoveToRoomN  Room 50
  .DB 0x0
L15a9:
RoomCommands_42
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1e         ;     MoveToRoomN  Room 30
  .DB 0x0
L15ae:
RoomCommands_43
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x1e         ;     MoveToRoomN  Room 30
  .DB 0x0
L15b3:
RoomCommands_44
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x21         ;     MoveToRoomN  Room 33
  .DB 0x0
L15b8:
RoomCommands_45
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x21         ;     MoveToRoomN  Room 33
  .DB 0x0
L15bd:
RoomCommands_46
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x27         ;     MoveToRoomN  Room 39
  .DB 0x0
L15c2:
RoomCommands_47
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x23         ;     MoveToRoomN  Room 35
  .DB 0x0
L15c7:
RoomCommands_48
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x24         ;     MoveToRoomN  Room 36
  .DB 0x0
L15cc:
RoomCommands_49
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x34         ;     MoveToRoomN  Room 52
  .DB 0x0
L15d1:
RoomCommands_50
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x29         ;     MoveToRoomN  Room 41
  .DB 0x0
L15d6:
RoomCommands_51
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x1d         ;     MoveToRoomN  Room 29
  .DB 0x21, 0xb           ; DROP,RELEAS,FREE,DISCAR
    .DB 0x11, 0x29        ;     AssertObjectNMatchesUserInput  Object "Coins"
    .DB 0x15, 0x29, 0x0   ;     UnmorphObjectNToRoomP  Object "Coins" Room 0
    .DB 0x18, 0x23        ;     MoveObjectNToCurrentRoom  Object "Batteries"
    .DB 0x4, 0x3a, 0xd8   ;     PrintMessageNN "THERE ARE NOW SOME FRESH BATTERIES HERE."
  .DB 0x0
L15e7:
RoomCommands_52
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x29         ;     MoveToRoomN  Room 41
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x28         ;     MoveToRoomN  Room 40
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x31         ;     MoveToRoomN  Room 49
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x24         ;     MoveToRoomN  Room 36
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0xb          ;     MoveToRoomN  Room 11
  .DB 0x0
L15fc:
RoomCommands_53
  .DB 0x6, 0x3            ; SE,SOUTHE
    .DB 0x1, 0x28         ;     MoveToRoomN  Room 40
  .DB 0x0
L1601:
RoomCommands_54
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x37         ;     MoveToRoomN  Room 55
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x39         ;     MoveToRoomN  Room 57
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x19         ;     MoveToRoomN  Room 25
  .DB 0x0
L160e:
RoomCommands_55
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x36         ;     MoveToRoomN  Room 54
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x38         ;     MoveToRoomN  Room 56
  .DB 0x11, 0x3           ; CLIMB
    .DB 0x1, 0x38         ;     MoveToRoomN  Room 56
  .DB 0x0
L161b:
RoomCommands_56
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x37         ;     MoveToRoomN  Room 55
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x37         ;     MoveToRoomN  Room 55
  .DB 0x11, 0x3           ; CLIMB
    .DB 0x1, 0x37         ;     MoveToRoomN  Room 55
  .DB 0xa, 0x4            ; D,DOWN
    .DB 0x4, 0x31, 0x92   ;     PrintMessageNN "YOU DON'T FIT THROUGH TWO-INCH SLIT!"
  .DB 0x27, 0xb           ; FILL
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0x1c       ;       AssertObjectNIsInPack  Object "Water in the bottle"
      .DB 0x4, 0x39, 0xc1 ;       PrintMessageNN "YOUR BOTTLE IS ALREADY FULL."
    .DB 0x19, 0x1c, 0x1b  ;     MorphObjectNIntoP  Object "Water in the bottle" Object "Bottle"
  .DB 0x0
L1639:
RoomCommands_57
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x36         ;     MoveToRoomN  Room 54
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x3a         ;     MoveToRoomN  Room 58
  .DB 0x0
L1642:
RoomCommands_58
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x3d         ;     MoveToRoomN  Room 61
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x39         ;     MoveToRoomN  Room 57
  .DB 0x11, 0x3           ; CLIMB
    .DB 0x1, 0x39         ;     MoveToRoomN  Room 57
  .DB 0x0
L1657:
RoomCommands_59
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3c         ;     MoveToRoomN  Room 60
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x3a         ;     MoveToRoomN  Room 58
  .DB 0x0
L1664:
RoomCommands_60
  .DB 0x1, 0x7            ; N,NORTH
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x2, 0x7            ; E,EAST
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x3, 0x7            ; S,SOUTH
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x5, 0x7            ; NE,NORTHE
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x6, 0x7            ; SE,SOUTHE
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x7, 0x7            ; SW,SOUTHW
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x8, 0x7            ; NW,NORTHW
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x9, 0x7            ; U,UP
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xf0       ;       AssertRandomIsGreaterThanN  N=0xf0
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x4, 0x6            ; W,WEST
    .DB 0x4, 0x31, 0xe6   ;     PrintMessageNN "YOU HAVE CRAWLED AROUND IN SOME LITTLE HOLES AND FOUND YOUR WAY BLOCKED BY A FALLEN SLAB. YOU ARE NOW BACK IN THE MAIN PASSAGE."
    .DB 0x1, 0x3c         ;     MoveToRoomN  Room 60
  .DB 0x0
L16ac:
RoomCommands_61
  .DB 0x3, 0x11           ; S,SOUTH
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0x17       ;       AssertObjectNIsInPack  Object "Sarcophagus"
      .DB 0x4, 0x32, 0x3d ;       PrintMessageNN "YOU CAN'T FIT THIS BIG SARCOPHAGUS THROUGH THAT LITTLE PASSAGE!"
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0x18       ;       AssertObjectNIsInPack  Object "Sarcophagus"
      .DB 0x4, 0x32, 0x3d ;       PrintMessageNN "YOU CAN'T FIT THIS BIG SARCOPHAGUS THROUGH THAT LITTLE PASSAGE!"
    .DB 0x1, 0x3a         ;     MoveToRoomN  Room 58
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x3e         ;     MoveToRoomN  Room 62
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x3f         ;     MoveToRoomN  Room 63
  .DB 0x0
L16c7:
RoomCommands_62
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x3d         ;     MoveToRoomN  Room 61
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x3d         ;     MoveToRoomN  Room 61
  .DB 0x0
L16d0:
RoomCommands_63
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x3d         ;     MoveToRoomN  Room 61
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x40         ;     MoveToRoomN  Room 64
  .DB 0x0
L16d9:
RoomCommands_64
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x3f         ;     MoveToRoomN  Room 63
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x3f         ;     MoveToRoomN  Room 63
  .DB 0x0
L16e2:
RoomCommands_65
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x3a         ;     MoveToRoomN  Room 58
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x4e         ;     MoveToRoomN  Room 78
  .DB 0x9, 0x7            ; U,UP
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xcc       ;       AssertRandomIsGreaterThanN  N=0xcc
    .DB 0x1, 0x48         ;     MoveToRoomN  Room 72
  .DB 0x1, 0x7            ; N,NORTH
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xcc       ;       AssertRandomIsGreaterThanN  N=0xcc
    .DB 0x1, 0x49         ;     MoveToRoomN  Room 73
  .DB 0x3, 0x7            ; S,SOUTH
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xcc       ;       AssertRandomIsGreaterThanN  N=0xcc
    .DB 0x1, 0x42         ;     MoveToRoomN  Room 66
  .DB 0xa, 0x7            ; D,DOWN
    .DB 0x7, 0x3          ;     SubScriptRev
      .DB 0xa, 0xcc       ;       AssertRandomIsGreaterThanN  N=0xcc
    .DB 0x1, 0x3b         ;     MoveToRoomN  Room 59
  .DB 0x0
L170b:
RoomCommands_66
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x50         ;     MoveToRoomN  Room 80
  .DB 0x0
L1714:
RoomCommands_72
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0x0
L171d:
RoomCommands_73
  .DB 0x4, 0x9            ; W,WEST
    .DB 0x7, 0x4          ;     SubScriptRev
      .DB 0xd             ;       AssertPackIsEmptyExceptForVase
      .DB 0x1, 0x4c       ;       MoveToRoomN  Room 76
    .DB 0x4, 0x32, 0x69   ;     PrintMessageNN "SOMETHING YOU'RE CARRYING WON'T FIT THROUGH THE TUNNEL WITH YOU. YOU'D BEST TAKE INVENTORY AND DROP SOMETHING."
  .DB 0x6, 0x3            ; SE,SOUTHE
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0x0
L172c:
RoomCommands_76
  .DB 0x2, 0x9            ; E,EAST
    .DB 0x7, 0x4          ;     SubScriptRev
      .DB 0xd             ;       AssertPackIsEmptyExceptForVase
      .DB 0x1, 0x49       ;       MoveToRoomN  Room 73
    .DB 0x4, 0x32, 0x69   ;     PrintMessageNN "SOMETHING YOU'RE CARRYING WON'T FIT THROUGH THE TUNNEL WITH YOU. YOU'D BEST TAKE INVENTORY AND DROP SOMETHING."
  .DB 0xc, 0x9            ; OUT,OUTSID
    .DB 0x7, 0x4          ;     SubScriptRev
      .DB 0xd             ;       AssertPackIsEmptyExceptForVase
      .DB 0x1, 0x49       ;       MoveToRoomN  Room 73
    .DB 0x4, 0x32, 0x69   ;     PrintMessageNN "SOMETHING YOU'RE CARRYING WON'T FIT THROUGH THE TUNNEL WITH YOU. YOU'D BEST TAKE INVENTORY AND DROP SOMETHING."
  .DB 0x0
L1741:
RoomCommands_78
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x41         ;     MoveToRoomN  Room 65
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x50         ;     MoveToRoomN  Room 80
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x4f         ;     MoveToRoomN  Room 79
  .DB 0x0
L174e:
RoomCommands_79
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x4e         ;     MoveToRoomN  Room 78
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x4e         ;     MoveToRoomN  Room 78
  .DB 0x0
L1757:
RoomCommands_80
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x4e         ;     MoveToRoomN  Room 78
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x42         ;     MoveToRoomN  Room 66
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x51         ;     MoveToRoomN  Room 81
  .DB 0x0
L1764:
RoomCommands_81
  .DB 0x9, 0x3            ; U,UP
    .DB 0x1, 0x50         ;     MoveToRoomN  Room 80
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x50         ;     MoveToRoomN  Room 80
  .DB 0x11, 0x16          ; CLIMB
    .DB 0x7, 0x8          ;     SubScriptRev
      .DB 0x3, 0x9        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Giant beanstalk"
      .DB 0x4, 0x32, 0xb5 ;       PrintMessageNN "YOU CLAMBER UP THE PLANT AND SCURRY THROUGH THE HOLE AT THE TOP."
      .DB 0x1, 0x4d       ;       MoveToRoomN  Room 77
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x3, 0x8        ;       AssertObjectNIsInCurrentRoomOrPack  Object "12 foot beanstalk"
      .DB 0x4, 0x32, 0xe2 ;       PrintMessageNN "YOU'VE CLIMBED UP THE PLANT AND OUT OF THE PIT."
    .DB 0x1, 0x50         ;     MoveToRoomN  Room 80
    .DB 0x4, 0x3b, 0xfb   ;     PrintMessageNN "THERE IS NOTHING HERE TO CLIMB. USE UP OR OUT TO LEAVE THE PIT."
  .DB 0x24, 0x2f          ; POUR
    .DB 0x11, 0x1c        ;     AssertObjectNMatchesUserInput  Object "Water in the bottle"
    .DB 0x15, 0x1c, 0x0   ;     UnmorphObjectNToRoomP  Object "Water in the bottle" Room 0
    .DB 0x7, 0xe          ;     SubScriptRev
      .DB 0x3, 0x7        ;       AssertObjectNIsInCurrentRoomOrPack  Object "Tiny plant"
      .DB 0x15, 0x7, 0x0  ;       UnmorphObjectNToRoomP  Object "Tiny plant" Room 0
      .DB 0x18, 0x8       ;       MoveObjectNToCurrentRoom  Object "12 foot beanstalk"
      .DB 0x4, 0x3b, 0x82 ;       PrintMessageNN "THE PLANT SPURTS INTO FURIOUS GROWTH FOR A FEW SECONDS."
      .DB 0x4, 0x2d, 0x8a ;       PrintMessageNN "THERE IS A TWELVE FOOT BEAN STALK STRETCHING UP OUT OF THE PIT, BELLOWING "WATER... WATER...""
    .DB 0x7, 0xe          ;     SubScriptRev
      .DB 0x3, 0x8        ;       AssertObjectNIsInCurrentRoomOrPack  Object "12 foot beanstalk"
      .DB 0x15, 0x8, 0x0  ;       UnmorphObjectNToRoomP  Object "12 foot beanstalk" Room 0
      .DB 0x18, 0x9       ;       MoveObjectNToCurrentRoom  Object "Giant beanstalk"
      .DB 0x4, 0x3b, 0xa9 ;       PrintMessageNN "THE PLANT GROWS EXPLOSIVELY, ALMOST FILLING THE BOTTOM OF THE PIT."
      .DB 0x4, 0x2d, 0xca ;       PrintMessageNN "THERE IS A GIGANTIC BEAN STALK STRETCHING ALL THE WAY UP TO THE HOLE."
    .DB 0x15, 0x9, 0x0    ;     UnmorphObjectNToRoomP  Object "Giant beanstalk" Room 0
    .DB 0x18, 0x7         ;     MoveObjectNToCurrentRoom  Object "Tiny plant"
    .DB 0x4, 0x3b, 0xd7   ;     PrintMessageNN "YOU'VE OVER-WATERED THE PLANT! IT'S SHRIVELING UP!"
    .DB 0x4, 0x2d, 0x5e   ;     PrintMessageNN "THERE IS A TINY PLANT IN THE PIT, MURMURING "WATER, WATER, ...""
  .DB 0x0
L17b4:
RoomCommands_77
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x51         ;     MoveToRoomN  Room 81
  .DB 0xa, 0x3            ; D,DOWN
    .DB 0x1, 0x51         ;     MoveToRoomN  Room 81
  .DB 0x11, 0x3           ; CLIMB
    .DB 0x1, 0x51         ;     MoveToRoomN  Room 81
  .DB 0x10, 0x5           ; JUMP
    .DB 0x4, 0x30, 0x8a   ;     PrintMessageNN "YOU ARE AT THE BOTTOM OF THE PIT WITH A BROKEN NECK."
    .DB 0x5               ;     PrintScoreAndStop
  .DB 0x4, 0x3            ; W,WEST
    .DB 0x1, 0x47         ;     MoveToRoomN  Room 71
  .DB 0x0
L17cb:
RoomCommands_71
  .DB 0x1, 0x3            ; N,NORTH
    .DB 0x1, 0x44         ;     MoveToRoomN  Room 68
  .DB 0x2, 0x3            ; E,EAST
    .DB 0x1, 0x46         ;     MoveToRoomN  Room 70
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x4d         ;     MoveToRoomN  Room 77
  .DB 0x0
L17d8:
RoomCommands_70
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x47         ;     MoveToRoomN  Room 71
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x47         ;     MoveToRoomN  Room 71
  .DB 0x0
L17e1:
RoomCommands_68
  .DB 0x3, 0x3            ; S,SOUTH
    .DB 0x1, 0x47         ;     MoveToRoomN  Room 71
  .DB 0xc, 0x3            ; OUT,OUTSID
    .DB 0x1, 0x47         ;     MoveToRoomN  Room 71
  .DB 0x0

17EA: FF        

; Ambient light table ... 2 bytes per room
; 0x4000 means there is light in the room (no need for a lamp)
; 0x0000 means you better have a lamp

17EB: 40              NEGa
17EC: 00 40           NEG $40
17EE: 00 40           NEG $40
17F0: 00 40           NEG $40
17F2: 00 40           NEG $40
17F4: 00 40           NEG $40
17F6: 00 40           NEG $40
17F8: 00 00           NEG $00
17FA: 00 00           NEG $00
17FC: 00 00           NEG $00
17FE: 00 00           NEG $00
1800: 00 00           NEG $00
1802: 00 00           NEG $00
1804: 00 00           NEG $00
1806: 00 00           NEG $00
1808: 00 00           NEG $00
180A: 00 00           NEG $00
180C: 00 00           NEG $00
180E: 00 00           NEG $00
1810: 00 00           NEG $00
1812: 00 00           NEG $00
1814: 00 00           NEG $00
1816: 00 00           NEG $00
1818: 00 00           NEG $00
181A: 00 00           NEG $00
181C: 00 00           NEG $00
181E: 00 00           NEG $00
1820: 00 00           NEG $00
1822: 00 00           NEG $00
1824: 00 00           NEG $00
1826: 00 00           NEG $00
1828: 00 00           NEG $00
182A: 00 00           NEG $00
182C: 00 00           NEG $00
182E: 00 00           NEG $00
1830: 00 00           NEG $00
1832: 00 00           NEG $00
1834: 00 00           NEG $00
1836: 00 00           NEG $00
1838: 00 00           NEG $00
183A: 00 00           NEG $00
183C: 00 00           NEG $00
183E: 00 00           NEG $00
1840: 00 00           NEG $00
1842: 00 00           NEG $00
1844: 00 00           NEG $00
1846: 00 00           NEG $00
1848: 00 00           NEG $00
184A: 00 00           NEG $00
184C: 00 00           NEG $00
184E: 00 00           NEG $00
1850: 00 00           NEG $00
1852: 00 00           NEG $00
1854: 00 00           NEG $00
1856: 00 00           NEG $00
1858: 00 00           NEG $00
185A: 00 00           NEG $00
185C: 00 00           NEG $00
185E: 00 00           NEG $00
1860: 00 00           NEG $00
1862: 00 00           NEG $00
1864: 00 00           NEG $00
1866: 00 00           NEG $00
1868: 00 00           NEG $00
186A: 00 00           NEG $00
186C: 00 00           NEG $00
186E: 00 00           NEG $00
1870: 00 00           NEG $00
1872: 00 00           NEG $00
1874: 00 00           NEG $00
1876: 00 00           NEG $00
1878: 00 00           NEG $00
187A: 00 00           NEG $00
187C: 00 00           NEG $00
187E: 00 00           NEG $00
1880: 00 40           NEG $40
1882: 00 00           NEG $00
1884: 00 00           NEG $00
1886: 00 00           NEG $00
1888: 00 00           NEG $00
188A: 00 00           NEG $00
188C: 00 

; Object data table (2 bytes)
;
; MCT? ???? RRRRRRRR
;
; Second byte is object's location (room number).
; M - if set, the second byte is actual object number. Allows objects to transform.
; T - if set, object is treasure.
; C - if set, object can be picked up.

L188D:
    .DW    0x0000 ; 1
    .DW    0x0000 
    .DW    0x0000 
    .DW    0x0000 
    .DW    0x0000 
    .DW    0x0033 
    .DW    0x0051
    .DW    0x0000
    .DW    0x0000
    .DW    0x0000 ; 10
    .DW    0x0010
    .DW    0x0000
    .DW    0x0000
    .DW    0x4002
    .DW    0x4000 
    .DW    0x4008 
    .DW    0x4009 
    .DW    0x4048
    .DW    0x400B
    .DW    0x0000 ; 20
    .DW    0x0000
    .DW    0x6000
    .DW    0x403D
    .DW    0x4000
    .DW    0x403B 
    .DW    0x4002
    .DW    0x4002
    .DW    0xC01B
    .DW    0x0000
    .DW    0x0038 ; 30
    .DW    0x604C
    .DW    0x6000
    .DW    0x6049
    .DW    0x6044
    .DW    0x4000 
    .DW    0x4000 
    .DW    0x600E ; 37 
    .DW    0x6011 
    .DW    0x6019
    .DW    0x6012 ; 40
    .DW    0x6018
    .DW    0x6000
    .DW    0x6047
    .DW    0x4000 ; 44 

18E5: 01 ; RoomNumber (start in room 1)

18E6: 00 ; TurnCountMSB (BCD format)
18E7: 00 ; TurnCountLSB (BCD format)

18E8: 00 ; LampTime

18EA: 00 ; LastRoomNumber

18EB: 00 ; NumInPack

18EC: 00 ; * NOT USED * 
  

; Object descriptions (44 objects)
; For packable objects each slot points to a message pair. The first is the long
; description and the second is the short.


18ED: 2C70     ;  1 Stone bridge
18EF: 2C70     ;    Stone bridge
18F1:   01F9   ;    ?3?
18F3:   01F9   ;    ?4?
18F5:   01F9   ;    ?5?
18F7: 2DFA     ;    Vending Machine
18F9: 2D5E     ;    Tiny plant
18FB: 2D8A     ;    12 foot beanstalk
18FD: 2DCA     ;    Giant beanstalk
18FF:   0000   ; 10 ?10?
1901: 2C52     ;    Serpent bars the way
1903:   0000   ;    ?12?
1905:   0000   ;    ?13?
1907: 2B46     ;    Lamp (not lit)
1909: 2B6B     ;    Lamp (lit)
190B: 2B8D     ;    Statue box
190D: 2BB6     ;    Scepter
190F: 2C2A     ;    Pillow
1911: 2BE5     ;    Statue
1913: 2C03     ; 20 Statue in box
1915: 3006     ;    Pottery
1917: 3060     ;    Pearl
1919: 2C90     ;    Sarcophagus
191B: 2C90     ;    Sarcophagus
191D: 2CC9     ;    Magazines
191F: 2D05     ;    Food
1921: 2D1D     ;    Bottle
1923: 2D39     ;    Water in the bottle
1925: 01F9     ;    ?29?
1927: 01F9     ; 30 ?30?
1929: 302D     ;    Emerald
192B: 2FDE     ;    Vase on pillow
192D: 2FBB     ;    Vase
192F: 2F97     ;    Key
1931: 2E49     ;    Batteries
1933: 2E68     ;    Worn-out batteries
1935: 2E94     ; 37 Gold Nugget
1937: 2EC4     ;    Diamonds
1939: 2EE3     ;    Silver
193B: 2F03     ; 40 Jewelry
193D: 2F27     ;    Coins
193F: 2F44     ;    Chest
1941: 2F6B     ;    Nest of golden eggs
1943: 2B46     ; 44 Lamp

; General command handler (when the current room doesn't care)

L1945:
  .DB 0x1, 0x4            ; N,NORTH
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x2, 0x4            ; E,EAST
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x3, 0x4            ; S,SOUTH
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x4, 0x4            ; W,WEST
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x5, 0x4            ; NE,NORTHE
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x6, 0x4            ; SE,SOUTHE
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x7, 0x4            ; SW,SOUTHW
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x8, 0x4            ; NW,NORTHW
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0x9, 0x4            ; U,UP
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0xa, 0x4            ; D,DOWN
    .DB 0x4, 0x33, 0x4    ;     PrintMessageNN "THERE IS NO WAY FOR YOU TO GO THAT DIRECTION."
  .DB 0xb, 0x4            ; IN,INSIDE
    .DB 0x4, 0x33, 0x24   ;     PrintMessageNN "I DON'T KNOW IN FROM OUT HERE. USE COMPASS POINTS."
  .DB 0xc, 0x4            ; OUT,OUTSID
    .DB 0x4, 0x33, 0x24   ;     PrintMessageNN "I DON'T KNOW IN FROM OUT HERE. USE COMPASS POINTS."
  .DB 0xe, 0x4            ; LEFT
    .DB 0x4, 0x33, 0x48   ;     PrintMessageNN "I AM UNSURE HOW YOU ARE FACING. USE COMPASS POINTS."
  .DB 0xf, 0x4            ; RIGHT
    .DB 0x4, 0x33, 0x48   ;     PrintMessageNN "I AM UNSURE HOW YOU ARE FACING. USE COMPASS POINTS."
  .DB 0x12, 0x4           ; PANEL
    .DB 0x4, 0x33, 0x6c   ;     PrintMessageNN "NOTHING HAPPENS."
  .DB 0x14, 0x2           ; BACK
    .DB 0xe               ;     MoveToLastRoom
  .DB 0x16, 0x4           ; SWIM
    .DB 0x4, 0x33, 0x79   ;     PrintMessageNN "I DON'T KNOW HOW."
  .DB 0x17, 0x18          ; ON,LIGHT
    .DB 0x7, 0xc          ;     SubScriptRev
      .DB 0x2, 0xe        ;       AssertObjectNIsInPack  Object "Lamp (not lit)"
      .DB 0x15, 0xe, 0x0  ;       UnmorphObjectNToRoomP  Object "Lamp (not lit)" Room 0
      .DB 0x15, 0xf, 0xff ;       UnmorphObjectNToRoomP  Object "Lamp (lit)" Room 255
      .DB 0x4, 0x33, 0xa5 ;       PrintMessageNN "YOUR LAMP IS NOW ON."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0xf        ;       AssertObjectNIsInPack  Object "Lamp (lit)"
      .DB 0x4, 0x33, 0xa5 ;       PrintMessageNN "YOUR LAMP IS NOW ON."
    .DB 0x4, 0x33, 0xb5   ;     PrintMessageNN "YOU HAVE NO SOURCE OF LIGHT."
  .DB 0x18, 0x18          ; OFF
    .DB 0x7, 0xc          ;     SubScriptRev
      .DB 0x2, 0xf        ;       AssertObjectNIsInPack  Object "Lamp (lit)"
      .DB 0x15, 0xf, 0x0  ;       UnmorphObjectNToRoomP  Object "Lamp (lit)" Room 0
      .DB 0x15, 0xe, 0xff ;       UnmorphObjectNToRoomP  Object "Lamp (not lit)" Room 255
      .DB 0x4, 0x33, 0xca ;       PrintMessageNN "YOUR LAMP IS NOW OFF."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x2, 0xe        ;       AssertObjectNIsInPack  Object "Lamp (not lit)"
      .DB 0x4, 0x33, 0xca ;       PrintMessageNN "YOUR LAMP IS NOW OFF."
    .DB 0x4, 0x33, 0xb5   ;     PrintMessageNN "YOU HAVE NO SOURCE OF LIGHT."
  .DB 0x19, 0x2           ; QUIT,STOP
    .DB 0x9               ;     PrintScoreAndStop
  .DB 0x1a, 0x2           ; SCORE
    .DB 0x8               ;     PrintScore
  .DB 0x1b, 0x2           ; INVENT
    .DB 0xf               ;     PrintInventory
  .DB 0x1c, 0x2           ; LOOK
    .DB 0x10              ;     PrintRoomDescription
  .DB 0x28, 0x47          ; TAKE,GET,CARRY,CATCH,STEAL,CAPTUR
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x7       ;       AssertObjectNMatchesUserInput  Object "Tiny plant"
      .DB 0x4, 0x38, 0xef ;       PrintMessageNN "THE PLANT HAS EXCEPTIONALLY DEEP ROOTS AND CANNOT BE PULLED FREE."
    .DB 0x7, 0x17         ;     SubScriptRev
      .DB 0x11, 0x13      ;       AssertObjectNMatchesUserInput  Object "Statue"
      .DB 0x7, 0x6        ;       SubScriptRev
        .DB 0x2, 0x11     ;         AssertObjectNIsInPack  Object "Scepter"
        .DB 0x4, 0x39, 0x52 ;         PrintMessageNN "AS YOU APPROACH THE STATUE, IT COMES TO LIFE AND FLIES ACROSS THE CHAMBER WHERE IT LANDS AND RETURNS TO STONE."
      .DB 0x7, 0x9        ;       SubScriptRev
        .DB 0x2, 0x10     ;         AssertObjectNIsInPack  Object "Statue box"
        .DB 0x15, 0x13, 0x0 ;         UnmorphObjectNToRoomP  Object "Statue" Room 0
        .DB 0x19, 0x14, 0x10 ;         MorphObjectNIntoP  Object "Statue in box" Object "Statue box"
      .DB 0x4, 0x39, 0x9e ;       PrintMessageNN "YOU CAN LIFT THE STATUE, BUT YOU CANNOT CARRY IT."
    .DB 0x7, 0xa          ;     SubScriptRev
      .DB 0x11, 0x20      ;       AssertObjectNMatchesUserInput  Object "Vase on pillow"
      .DB 0x12, 0x21      ;       GetObjectFromRoom  Object "Vase"
      .DB 0x15, 0x20, 0x0 ;       UnmorphObjectNToRoomP  Object "Vase on pillow" Room 0
      .DB 0x18, 0x12      ;       MoveObjectNToCurrentRoom  Object "Pillow"
    .DB 0x7, 0xd          ;     SubScriptRev
      .DB 0x11, 0x1e      ;       AssertObjectNMatchesUserInput  Object "?30?"
      .DB 0x7, 0x6        ;       SubScriptRev
        .DB 0x2, 0x1c     ;         AssertObjectNIsInPack  Object "Water in the bottle"
        .DB 0x4, 0x39, 0xc1 ;         PrintMessageNN "YOUR BOTTLE IS ALREADY FULL."
      .DB 0x19, 0x1c, 0x1b ;       MorphObjectNIntoP  Object "Water in the bottle" Object "Bottle"
    .DB 0x7, 0xc          ;     SubScriptRev
      .DB 0x11, 0x12      ;       AssertObjectNMatchesUserInput  Object "Pillow"
      .DB 0x1a, 0x20      ;       AssertObjectNIsInCurrentRoom  Object "Vase on pillow"
      .DB 0x15, 0x20, 0x0 ;       UnmorphObjectNToRoomP  Object "Vase on pillow" Room 0
      .DB 0x18, 0x21      ;       MoveObjectNToCurrentRoom  Object "Vase"
      .DB 0x12, 0x12      ;       GetObjectFromRoom  Object "Pillow"
    .DB 0x16              ;     GetUserInputObject
  .DB 0x21, 0x17          ; DROP,RELEAS,FREE,DISCAR
    .DB 0x7, 0x14         ;     SubScriptRev
      .DB 0x11, 0x21      ;       AssertObjectNMatchesUserInput  Object "Vase"
      .DB 0x15, 0x21, 0x0 ;       UnmorphObjectNToRoomP  Object "Vase" Room 0
      .DB 0x7, 0x8        ;       SubScriptRev
        .DB 0x1a, 0x12    ;         AssertObjectNIsInCurrentRoom  Object "Pillow"
        .DB 0x18, 0x20    ;         MoveObjectNToCurrentRoom  Object "Vase on pillow"
        .DB 0x4, 0x3a, 0x95 ;         PrintMessageNN "THE VASE IS NOW RESTING, DELICATELY, ON A VELVET PILLOW."
      .DB 0x18, 0x15      ;       MoveObjectNToCurrentRoom  Object "Pottery"
      .DB 0x4, 0x3a, 0xbd ;       PrintMessageNN "THE VASE DROPS WITH A DELICATE CRASH."
    .DB 0x17              ;     DropUserInputObject
  .DB 0x26, 0xe           ; THROW,TOSS
    .DB 0x7, 0xb          ;     SubScriptRev
      .DB 0x11, 0x21      ;       AssertObjectNMatchesUserInput  Object "Vase"
      .DB 0x15, 0x21, 0x0 ;       UnmorphObjectNToRoomP  Object "Vase" Room 0
      .DB 0x18, 0x15      ;       MoveObjectNToCurrentRoom  Object "Pottery"
      .DB 0x4, 0x3a, 0xf5 ;       PrintMessageNN "YOU HAVE TAKEN THE VASE AND HURLED IT DELICATELY TO THE GROUND."
    .DB 0x17              ;     DropUserInputObject
  .DB 0x29, 0x36          ; OPEN
    .DB 0x7, 0x1c         ;     SubScriptRev
      .DB 0x11, 0x17      ;       AssertObjectNMatchesUserInput  Object "Sarcophagus"
      .DB 0x7, 0x6        ;       SubScriptRev
        .DB 0x2, 0x17     ;         AssertObjectNIsInPack  Object "Sarcophagus"
        .DB 0x4, 0x35, 0xa4 ;         PrintMessageNN "I'D ADVISE YOU TO PUT DOWN THE SARCOPHAGUS BEFORE OPENING IT!!"
      .DB 0x7, 0xe        ;       SubScriptRev
        .DB 0x2, 0x22     ;         AssertObjectNIsInPack  Object "Key"
        .DB 0x4, 0x35, 0x61 ;         PrintMessageNN "A GLISTENING PEARL FALLS OUT OF THE SARCOPHAGUS AND ROLLS AWAY. THE SARCOPHAGUS SNAPS SHUT AGAIN."
        .DB 0x15, 0x16, 0x40 ;         UnmorphObjectNToRoomP  Object "Pearl" Room 64
        .DB 0x15, 0x17, 0x0 ;         UnmorphObjectNToRoomP  Object "Sarcophagus" Room 0
        .DB 0x18, 0x18    ;         MoveObjectNToCurrentRoom  Object "Sarcophagus"
      .DB 0x4, 0x36, 0xa  ;       PrintMessageNN "YOU DON'T HAVE ANYTHING STRONG ENOUGH TO OPEN THE SARCOPHAGUS."
    .DB 0x7, 0x14         ;     SubScriptRev
      .DB 0x11, 0x18      ;       AssertObjectNMatchesUserInput  Object "Sarcophagus"
      .DB 0x7, 0x6        ;       SubScriptRev
        .DB 0x2, 0x18     ;         AssertObjectNIsInPack  Object "Sarcophagus"
        .DB 0x4, 0x35, 0xa4 ;         PrintMessageNN "I'D ADVISE YOU TO PUT DOWN THE SARCOPHAGUS BEFORE OPENING IT!!"
      .DB 0x7, 0x6        ;       SubScriptRev
        .DB 0x2, 0x22     ;         AssertObjectNIsInPack  Object "Key"
        .DB 0x4, 0x35, 0xd0 ;         PrintMessageNN "THE SARCOPHAGUS CREAKS OPEN, REVEALING NOTHING INSIDE. IT PROMPTLY SNAPS SHUT AGAIN."
      .DB 0x4, 0x36, 0xa  ;       PrintMessageNN "YOU DON'T HAVE ANYTHING STRONG ENOUGH TO OPEN THE SARCOPHAGUS."
    .DB 0x4, 0x36, 0x36   ;     PrintMessageNN "I DON'T KNOW HOW TO LOCK OR UNLOCK SUCH A THING."
  .DB 0x23, 0x4           ; WAVE,SHAKE,SWING
    .DB 0x4, 0x33, 0x6c   ;     PrintMessageNN "NOTHING HAPPENS."
  .DB 0x24, 0xe           ; POUR
    .DB 0x7, 0x9          ;     SubScriptRev
      .DB 0x11, 0x1c      ;       AssertObjectNMatchesUserInput  Object "Water in the bottle"
      .DB 0x15, 0x1c, 0x0 ;       UnmorphObjectNToRoomP  Object "Water in the bottle" Room 0
      .DB 0x4, 0x34, 0x92 ;       PrintMessageNN "YOUR BOTTLE IS EMPTY AND THE GROUND IS WET."
    .DB 0x4, 0x34, 0xb1   ;     PrintMessageNN "YOU CAN'T POUR THAT."
  .DB 0x25, 0x12          ; RUB
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0xe       ;       AssertObjectNMatchesUserInput  Object "Lamp (not lit)"
      .DB 0x4, 0x34, 0xc1 ;       PrintMessageNN "RUBBING THE ELECTRIC LAMP IS NOT PARTICULARLY REWARDING. ANYWAY, NOTHING EXCITING HAPPENS."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0xf       ;       AssertObjectNMatchesUserInput  Object "Lamp (lit)"
      .DB 0x4, 0x34, 0xc1 ;       PrintMessageNN "RUBBING THE ELECTRIC LAMP IS NOT PARTICULARLY REWARDING. ANYWAY, NOTHING EXCITING HAPPENS."
    .DB 0x4, 0x34, 0xff   ;     PrintMessageNN "PECULIAR. NOTHING UNEXPECTED HAPPENS."
  .DB 0x27, 0x12          ; FILL
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x1b      ;       AssertObjectNMatchesUserInput  Object "Bottle"
      .DB 0x4, 0x35, 0x1a ;       PrintMessageNN "THERE IS NOTHING HERE WITH WHICH TO FILL THE BOTTLE."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x21      ;       AssertObjectNMatchesUserInput  Object "Vase"
      .DB 0x4, 0x34, 0x82 ;       PrintMessageNN "DON'T BE RIDICULOUS!"
    .DB 0x4, 0x35, 0x51   ;     PrintMessageNN "YOU CAN'T FILL THAT."
  .DB 0x2c, 0x2d          ; ATTACK,KILL,HIT,FIGHT
    .DB 0x7, 0x9          ;     SubScriptRev
      .DB 0x11, 0x13      ;       AssertObjectNMatchesUserInput  Object "Statue"
      .DB 0x15, 0x13, 0x0 ;       UnmorphObjectNToRoomP  Object "Statue" Room 0
      .DB 0x4, 0x36, 0x58 ;       PrintMessageNN "THE BIRD STATUE IS NOW DEAD. ITS BODY DISAPPEARS."
    .DB 0x7, 0x9          ;     SubScriptRev
      .DB 0x11, 0x14      ;       AssertObjectNMatchesUserInput  Object "Statue in box"
      .DB 0x15, 0x14, 0x0 ;       UnmorphObjectNToRoomP  Object "Statue in box" Room 0
      .DB 0x4, 0x36, 0x58 ;       PrintMessageNN "THE BIRD STATUE IS NOW DEAD. ITS BODY DISAPPEARS."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x17      ;       AssertObjectNMatchesUserInput  Object "Sarcophagus"
      .DB 0x4, 0x36, 0x7b ;       PrintMessageNN "THE STONE IS VERY STRONG AND IS IMPERVIOUS TO ATTACK."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x18      ;       AssertObjectNMatchesUserInput  Object "Sarcophagus"
      .DB 0x4, 0x36, 0x7b ;       PrintMessageNN "THE STONE IS VERY STRONG AND IS IMPERVIOUS TO ATTACK."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0xb       ;       AssertObjectNMatchesUserInput  Object "Serpent bars the way"
      .DB 0x4, 0x36, 0xa1 ;       PrintMessageNN "ATTACKING THE SERPENT BOTH DOESN'T WORK AND IS VERY DANGEROUS."
    .DB 0x4, 0x36, 0xcd   ;     PrintMessageNN "YOU CAN'T BE SERIOUS!"
  .DB 0x30, 0x4           ; BREAK,SMASH
    .DB 0x4, 0x36, 0xdd   ;     PrintMessageNN "IT IS BEYOND YOUR POWER TO DO THAT."
  .DB 0x2e, 0x23          ; EAT
    .DB 0x7, 0x9          ;     SubScriptRev
      .DB 0x11, 0x1a      ;       AssertObjectNMatchesUserInput  Object "Food"
      .DB 0x15, 0x1a, 0x0 ;       UnmorphObjectNToRoomP  Object "Food" Room 0
      .DB 0x4, 0x36, 0xf7 ;       PrintMessageNN "THANK YOU, IT WAS DELICIOUS!"
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0xa       ;       AssertObjectNMatchesUserInput  Object "?10?"
      .DB 0x4, 0x37, 0xc  ;       PrintMessageNN "I THINK I JUST LOST MY APPETITE."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x13      ;       AssertObjectNMatchesUserInput  Object "Statue"
      .DB 0x4, 0x37, 0xc  ;       PrintMessageNN "I THINK I JUST LOST MY APPETITE."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x14      ;       AssertObjectNMatchesUserInput  Object "Statue in box"
      .DB 0x4, 0x37, 0xc  ;       PrintMessageNN "I THINK I JUST LOST MY APPETITE."
    .DB 0x4, 0x34, 0x82   ;     PrintMessageNN "DON'T BE RIDICULOUS!"
  .DB 0x2f, 0x15          ; DRINK
    .DB 0x7, 0x9          ;     SubScriptRev
      .DB 0x11, 0x1c      ;       AssertObjectNMatchesUserInput  Object "Water in the bottle"
      .DB 0x15, 0x1c, 0x0 ;       UnmorphObjectNToRoomP  Object "Water in the bottle" Room 0
      .DB 0x4, 0x35, 0x3f ;       PrintMessageNN "THE BOTTLE IS NOW EMPTY."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x1e      ;       AssertObjectNMatchesUserInput  Object "?30?"
      .DB 0x4, 0x37, 0x24 ;       PrintMessageNN "YOU HAVE TAKEN A DRINK FROM THE STREAM. THE WATER TASTES STRONGLY OF MINERALS, BUT IS NOT UNPLEASANT. IT IS EXTREMELY COLD."
    .DB 0x4, 0x36, 0xcd   ;     PrintMessageNN "YOU CAN'T BE SERIOUS!"
  .DB 0x2d, 0x38          ; FEED
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x13      ;       AssertObjectNMatchesUserInput  Object "Statue"
      .DB 0x4, 0x37, 0x78 ;       PrintMessageNN "IT'S NOT HUNGRY. BESIDES, YOU HAVE NO BIRD SEED."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x14      ;       AssertObjectNMatchesUserInput  Object "Statue in box"
      .DB 0x4, 0x37, 0x78 ;       PrintMessageNN "IT'S NOT HUNGRY. BESIDES, YOU HAVE NO BIRD SEED."
    .DB 0x7, 0x10         ;     SubScriptRev
      .DB 0x11, 0xb       ;       AssertObjectNMatchesUserInput  Object "Serpent bars the way"
      .DB 0x7, 0x9        ;       SubScriptRev
        .DB 0x2, 0x14     ;         AssertObjectNIsInPack  Object "Statue in box"
        .DB 0x15, 0x14, 0x0 ;       UnmorphObjectNToRoomP  Object "Statue in box" Room 0
        .DB 0x4, 0x37, 0xc1 ;       PrintMessageNN "THE SERPENT HAS NOW DEVOURED YOUR BIRD STATUE."
      .DB 0x4, 0x37, 0xe2 ;       PrintMessageNN "THERE IS NOTHING HERE IT WANTS TO EAT - EXCEPT PERHAPS YOU."
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x17      ;       AssertObjectNMatchesUserInput  Object "Sarcophagus"
      .DB 0x4, 0x38, 0x3d ;       PrintMessageNN "I'M GAME. WOULD YOU CARE TO EXPLAIN HOW?"
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0x18      ;       AssertObjectNMatchesUserInput  Object "Sarcophagus"
      .DB 0x4, 0x38, 0x3d ;       PrintMessageNN "I'M GAME. WOULD YOU CARE TO EXPLAIN HOW?"
    .DB 0x7, 0x6          ;     SubScriptRev
      .DB 0x11, 0xd       ;       AssertObjectNMatchesUserInput  Object "?13?"
      .DB 0x4, 0x37, 0xe2 ;       PrintMessageNN "THERE IS NOTHING HERE IT WANTS TO EAT - EXCEPT PERHAPS YOU."
    .DB 0x4, 0x34, 0x82   ;     PrintMessageNN "DON'T BE RIDICULOUS!"
  .DB 0x39, 0x2           ; PLUGH
    .DB 0x1d              ;     JumpToTopOfGameLoop
  .DB 0x3a, 0x2           ; LOAD
    .DB 0x1b              ;     LoadGame
  .DB 0x3b, 0x2           ; SAVE
    .DB 0x1c              ;     SaveGame
  .DB 0x0

L1B66:

RoomDescription_1: ; 1b66
; Packed data takes 52 bytes.
    .pack(YOU ARE STANDING BEFORE THE ENTRANCE OF A PYRAMID. AROUND YOU IS A DESERT.)

RoomDescription_2 ; 1b9a
; Packed data takes 68 bytes.
    .pack(YOU ARE IN THE ENTRANCE TO THE PYRAMID. A HOLE IN THE FLOOR LEADS TO A PASSAGE BENEATH THE SURFACE.)

RoomDescription_3: ; 1bde
RoomDescription_4:
RoomDescription_5:
RoomDescription_6:
; Packed data takes 17 bytes.
    .pack(YOU ARE IN THE DESERT.)

RoomDescription_7: ; 1bef
; Packed data takes 120 bytes.
    .pack(YOU ARE IN A SMALL CHAMBER BENEATH A HOLE FROM THE SURFACE. A LOW CRAWL LEADS INWARD TO THE WEST.  HIEROGLYPHICS ON THE WALL TRANSLATE, "CURSE ALL WHO ENTER THIS SACRED CRYPT.")

RoomDescription_8: ; 1c67
; Packed data takes 69 bytes.
    .pack(YOU ARE CRAWLING OVER PEBBLES IN A LOW PASSAGE. THERE IS A DIM LIGHT AT THE EAST END OF THE PASSAGE.)

RoomDescription_9: ; 1cac
; Packed data takes 84 bytes.
    .pack(YOU ARE IN A ROOM FILLED WITH BROKEN POTTERY SHARDS OF ANCIENT EGYPTIAN CRAFTS. AN AWKWARD CORRIDOR LEADS UPWARD AND WEST.)

RoomDescription_10: ; 1d00
; Packed data takes 35 bytes.
    .pack(YOU ARE IN AN AWKWARD SLOPING EAST/WEST CORRIDOR.)

RoomDescription_11: ; 1d23
; Packed data takes 123 bytes.
    .pack(YOU ARE IN A SPLENDID CHAMBER THIRTY FEET HIGH. THE WALLS ARE FROZEN RIVERS OF ORANGE STONE. AN AWKWARD CORRIDOR AND A GOOD PASSAGE EXIT FROM THE EAST AND WEST SIDES OF THE CHAMBER.)

RoomDescription_12: ; 1d9e
; Packed data takes 108 bytes.
    .pack(AT YOUR FEET IS A SMALL PIT BREATHING TRACES OF WHITE MIST. AN EAST PASSAGE ENDS HERE EXCEPT FOR A SMALL CRACK LEADING ON. ROUGH STONE STEPS LEAD DOWN THE PIT.)

RoomDescription_13: ; 1e0a
; Packed data takes 210 bytes.
    .pack(YOU ARE AT ONE END OF A VAST HALL STRETCHING FORWARD OUT OF SIGHT TO THE WEST. THERE ARE OPENINGS TO EITHER SIDE. NEARBY, A WIDE STONE STAIRCASE LEADS DOWNWARD. THE HALL IS VERY MUSTY AND A COLD WIND BLOWS UP THE STAIRCASE. THERE IS A PASSAGE AT THE TOP OF A DOME BEHIND YOU. ROUGH STONE STEPS LEAD UP THE DOME.)

RoomDescription_14: ; 1edc
; Packed data takes 66 bytes.
    .pack(THIS IS A LOW ROOM WITH A HIEROGLYPH ON THE WALL. IT TRANSLATES "YOU WON'T GET IT UP THE STEPS".)

RoomDescription_15: ; 1f1e
; Packed data takes 92 bytes.
    .pack(YOU ARE ON THE EAST BANK OF A BOTTOMLESS PIT STRETCHING ACROSS THE HALL. THE MIST IS QUITE THICK HERE, AND THE PIT IS TOO WIDE TO JUMP.)

RoomDescription_16: ; 1f7a
; Packed data takes 49 bytes.
    .pack(YOU ARE IN THE PHARAOH'S CHAMBER, WITH PASSAGES OFF IN ALL DIRECTIONS.)

RoomDescription_17: ; 1fab
; Packed data takes 25 bytes.
    .pack(YOU ARE IN THE SOUTH SIDE CHAMBER.)

RoomDescription_18: ; 1fc4
; Packed data takes 47 bytes.
    .pack(YOU ARE ON THE WEST SIDE OF THE BOTTOMLESS PIT IN THE HALL OF GODS.)

RoomDescription_19: ; 1ff3
; Packed data takes 106 bytes.
    .pack(YOU ARE AT THE WEST END OF THE HALL OF GODS. A LOW WIDE PASS CONTINUES WEST AND ANOTHER GOES NORTH. TO THE SOUTH IS A LITTLE PASSAGE SIX FEET OFF THE FLOOR.)

RoomDescription_20: ; 205d
; Packed data takes 110 bytes.
    .pack(YOU ARE AT EAST END OF A VERY LONG HALL APPARENTLY WITHOUT SIDE CHAMBERS. TO THE EAST A LOW WIDE CRAWL SLANTS UP. TO THE NORTH A ROUND TWO FOOT HOLE SLANTS DOWN.)

RoomDescription_21: ; 20cb
; Packed data takes 75 bytes.
    .pack(YOU ARE AT THE WEST END OF A VERY LONG FEATURELESS HALL. THE HALL JOINS UP WITH A NARROW NORTH/SOUTH PASSAGE.)

RoomDescription_22: ; 2116
; Packed data takes 44 bytes.
    .pack(YOU ARE AT A CROSSOVER OF A HIGH N/S PASSAGE AND A LOW E/W ONE.)

RoomDescription_23: ; 2142
RoomDescription_42: 
RoomDescription_43:
RoomDescription_44:
RoomDescription_45:
RoomDescription_46:
RoomDescription_47:
RoomDescription_48:
RoomDescription_49: 
RoomDescription_50: 
RoomDescription_51:
RoomDescription_53:
; Packed data takes 8 bytes.
    .pack(DEAD END.)

RoomDescription_24: ; 214a
; Packed data takes 54 bytes.
    .pack(YOU ARE IN THE WEST THRONE CHAMBER. A PASSAGE CONTINUES WEST AND UP FROM HERE.)

RoomDescription_25: ; 2180
; Packed data takes 62 bytes.
    .pack(YOU ARE IN A LOW N/S PASSAGE AT A HOLE IN THE FLOOR. THE HOLE GOES DOWN TO AN E/W PASSAGE.)

RoomDescription_26: ; 21be
; Packed data takes 88 bytes.
    .pack(YOU ARE IN A LARGE ROOM, WITH A PASSAGE TO THE SOUTH, AND A WALL OF BROKEN ROCK TO THE EAST. THERE IS A PANEL ON THE NORTH WALL.)

RoomDescription_27: ; 2216
; Packed data takes 24 bytes.
    .pack(YOU ARE IN THE CHAMBER OF ANUBIS.)

RoomDescription_28:  ; 222e
RoomDescription_29:
RoomDescription_30: 
RoomDescription_31: 
RoomDescription_32: 
RoomDescription_33: 
RoomDescription_34: 
RoomDescription_35: 
RoomDescription_36: 
RoomDescription_37: 
RoomDescription_38: 
RoomDescription_39: 
RoomDescription_40: 
RoomDescription_41:
; Packed data takes 34 bytes.
    .pack(YOU ARE IN A MAZE OF TWISTY PASSAGES, ALL ALIKE.)

RoomDescription_52: ; 2250
; Packed data takes 93 bytes.
    .pack(YOU ARE ON THE BRINK OF A LARGE PIT. YOU COULD CLIMB DOWN, BUT YOU WOULD NOT BE ABLE TO CLIMB BACK UP. THE MAZE CONTINUES ON THIS LEVEL.)

RoomDescription_54: ; 22ad
; Packed data takes 89 bytes.
    .pack(YOU ARE IN A DIRTY BROKEN PASSAGE. TO THE EAST IS A CRAWL. TO THE WEST IS A LARGE PASSAGE. ABOVE YOU IS A HOLE TO ANOTHER PASSAGE.)

RoomDescription_55: ; 2306
; Packed data takes 50 bytes.
    .pack(YOU ARE ON THE BRINK OF A SMALL CLEAN CLIMBABLE PIT. A CRAWL LEADS WEST.)

RoomDescription_56: ; 2338
; Packed data takes 70 bytes.
    .pack(YOU ARE IN THE BOTTOM OF A SMALL PIT WITH A LITTLE STREAM, WHICH ENTERS AND EXITS THROUGH TINY SLITS.)

RoomDescription_57: ; 237e
; Packed data takes 86 bytes.
    .pack(YOU ARE IN A THE ROOM OF BES, WHOSE PICTURE IS ON THE WALL. THERE IS A BIG HOLE IN THE FLOOR. THERE IS A PASSAGE LEADING EAST.)

RoomDescription_58: ; 23d4
; Packed data takes 138 bytes.
    .pack(YOU ARE AT A COMPLEX JUNCTION. A LOW HANDS AND KNEES PASSAGE FROM THE NORTH JOINS A HIGHER CRAWL FROM THE EAST TO MAKE A WALKING PASSAGE GOING WEST. THERE IS ALSO A LARGE ROOM ABOVE. THE AIR IS DAMP HERE.)

RoomDescription_59: ; 245e
; Packed data takes 142 bytes.
    .pack(YOU ARE IN THE UNDERWORLD ANTEROOM OF SEKER. PASSAGES GO EAST, WEST, AND UP. HUMAN BONES ARE STREWN ABOUT ON THE FLOOR. HIEROGLYPHICS ON THE WALL ROUGHLY TRANSLATE TO "THOSE WHO PROCEED EAST MAY NEVER RETURN.")

RoomDescription_60: ; 24ec
; Packed data takes 47 bytes.
    .pack(YOU ARE AT THE LAND OF DEAD. PASSAGES LEAD OFF IN >ALL< DIRECTIONS.)

RoomDescription_61: ; 251b
; Packed data takes 168 bytes.
    .pack(YOU'RE IN A LARGE ROOM WITH ANCIENT DRAWINGS ON ALL WALLS. THE PICTURES DEPICT ATUM, A PHARAOH WEARING THE DOUBLE CROWN. A SHALLOW PASSAGE PROCEEDS DOWNWARD, AND A SOMEWHAT STEEPER ONE LEADS UP. A LOW HANDS AND KNEES PASSAGE ENTERS FROM THE SOUTH. )

RoomDescription_62: ; 25c3
; Packed data takes 90 bytes.
    .pack(YOU ARE IN A CHAMBER WHOSE WALL CONTAINS A PICTURE OF A MAN WEARING THE LUNAR DISK ON HIS HEAD.  HE IS THE GOD KHONS, THE MOON GOD.)

RoomDescription_63: ; 261d
; Packed data takes 38 bytes.
    .pack(YOU ARE IN A LONG SLOPING CORRIDOR WITH RAGGED WALLS.)

RoomDescription_64: ; 2643
; Packed data takes 34 bytes.
    .pack(YOU ARE IN A CUL-DE-SAC ABOUT EIGHT FEET ACROSS.)

RoomDescription_65: ; 2665
; Packed data takes 93 bytes.
    .pack(YOU ARE IN THE CHAMBER OF HORUS, A LONG EAST/WEST PASSAGE WITH HOLES EVERYWHERE. TO EXPLORE AT RANDOM, SELECT NORTH, SOUTH, UP, OR DOWN.)

RoomDescription_66: ; 26c2
; Packed data takes 146 bytes.
    .pack(YOU ARE IN A LARGE LOW CIRCULAR CHAMBER WHOSE FLOOR IS AN IMMENSE SLAB FALLEN FROM THE CEILING. EAST AND WEST THERE ONCE WERE LARGE PASSAGES, BUT THEY ARE NOW FILLED WITH SAND. LOW SMALL PASSAGES GO NORTH AND SOUTH.)

RoomDescription_72: ; 2754
; Packed data takes 89 bytes.
    .pack(YOU ARE IN THE PRIEST'S BEDROOM. THE WALLS ARE COVERED WITH CURTAINS, THE FLOOR WITH A THICK PILE CARPET. MOSS COVERS THE CEILING.)

RoomDescription_73: ; 27ad
; Packed data takes 114 bytes.
    .pack(THIS IS THE CHAMBER OF THE HIGH PRIEST. ANCIENT DRAWINGS COVER THE WALLS. AN EXTREMELY TIGHT TUNNEL LEADS WEST. IT LOOKS LIKE A TIGHT SQUEEZE. ANOTHER PASSAGE LEADS SE.)

RoomDescription_76: ; 281f
; Packed data takes 73 bytes.
    .pack(YOU ARE IN THE HIGH PRIEST'S TREASURE ROOM LIT BY AN EERIE GREEN LIGHT. A NARROW TUNNEL EXITS TO THE EAST.)

RoomDescription_78: ; 2868
; Packed data takes 218 bytes.
    .pack(YOU ARE AT THE EAST END OF THE TWOPIT ROOM. THE FLOOR HERE IS LITTERED WITH THIN ROCK SLABS, WHICH MAKE IT EASY TO DESCEND THE PITS. THERE IS A PATH HERE BYPASSING THE PITS TO CONNECT PASSAGES EAST AND WEST. THERE ARE HOLES ALL OVER, BUT THE ONLY BIG ONE IS ON THE WALL DIRECTLY OVER THE WEST PIT WHERE YOU CAN'T GET TO IT.)

RoomDescription_79: ; 2942
; Packed data takes 42 bytes.
    .pack(YOU ARE AT THE BOTTOM OF THE EASTERN PIT IN THE TWOPIT ROOM.)

RoomDescription_80: ; 296c
; Packed data takes 80 bytes.
    .pack(YOU ARE AT THE WEST END OF THE TWOPIT ROOM. THERE IS A LARGE HOLE IN THE WALL ABOVE THE PIT AT THIS END OF THE ROOM.)

RoomDescription_81: ; 29bc
; Packed data takes 86 bytes.
    .pack(YOU ARE AT THE BOTTOM OF THE WEST PIT IN THE TWOPIT ROOM. THERE IS A LARGE HOLE IN THE WALL ABOUT TWENTY FIVE FEET ABOVE YOU.)

RoomDescription_77: ; 2a12
; Packed data takes 102 bytes.
    .pack(YOU ARE IN A LONG, NARROW CORRIDOR STRETCHING OUT OF SIGHT TO THE WEST. AT THE EASTERN END IS A HOLE THROUGH WHICH YOU CAN SEE A PROFUSION OF LEAVES.)

RoomDescription_71: ; 2a78
; Packed data takes 85 bytes.
    .pack(YOU ARE IN THE CHAMBER OF OSIRIS. THE CEILING IS TOO HIGH UP FOR YOUR LAMP TO SHOW IT. PASSAGES LEAD EAST, NORTH, AND SOUTH.)

RoomDescription_70: ; 2acd
; Packed data takes 33 bytes.
    .pack(THE PASSAGE HERE IS BLOCKED BY A FALLEN BLOCK.)

RoomDescription_68: ; 2aee
; Packed data takes 88 bytes.
    .pack(YOU ARE IN THE CHAMBER OF NEKHEBET, A WOMAN WITH THE HEAD OF A VULTURE, WEARING THE CROWN OF EGYPT. A PASSAGE EXITS TO THE SOUTH.)


; GeneralMessage 2b46
; Packed data takes 26 bytes.
pack(THERE IS A SHINY BRASS LAMP NEARBY.)

; GeneralMessage 2b60
; Packed data takes 11 bytes.
pack(BRASS LANTERN)

; GeneralMessage 2b6b
; Packed data takes 23 bytes.
pack(THERE IS A LAMP SHINING NEARBY.)

; GeneralMessage 2b82
; Packed data takes 11 bytes.
pack(BRASS LANTERN)

; GeneralMessage 2b8d
; Packed data takes 32 bytes.
pack(THERE IS A SMALL STATUE BOX DISCARDED NEARBY.)

; GeneralMessage 2bad
; Packed data takes 9 bytes.
pack(STATUE BOX)

; GeneralMessage 2bb6
; Packed data takes 40 bytes.
pack(A THREE FOOT SCEPTER WITH AN ANKH ON AN END LIES NEARBY.)

; GeneralMessage 2bde
; Packed data takes 7 bytes.
pack(SCEPTER)

; GeneralMessage 2be5
; Packed data takes 30 bytes.
pack(A STATUE OF THE BIRD GOD IS SITTING HERE.)

; GeneralMessage 2c03
; Packed data takes 25 bytes.
pack(THERE IS A BIRD STATUE IN THE BOX.)

; GeneralMessage 2c1c
; Packed data takes 14 bytes.
pack(BIRD STATUE IN BOX)

; GeneralMessage 2c2a
; Packed data takes 29 bytes.
pack(A SMALL VELVET PILLOW LIES ON THE FLOOR.)

; GeneralMessage 2c47
; Packed data takes 11 bytes.
pack(VELVET PILLOW)

; GeneralMessage 2c52
; Packed data takes 30 bytes.
pack(A HUGE GREEN FIERCE SERPENT BARS THE WAY!)

; GeneralMessage 2c70
; Packed data takes 32 bytes.
pack(A STONE BRIDGE NOW SPANS THE BOTTOMLESS PIT.)

; GeneralMessage 2c90
; Packed data takes 42 bytes.
pack(THERE IS A SARCOPHAGUS HERE WITH IT'S COVER TIGHTLY CLOSED.)

; GeneralMessage 2cba
; Packed data takes 15 bytes.
pack(SARCOPHAGUS >GROAN<)

; GeneralMessage 2cc9
; Packed data takes 46 bytes.
pack(THERE ARE A FEW RECENT ISSUES OF "EGYPTIAN WEEKLY" MAGAZINE HERE.)

; GeneralMessage 2cf7
; Packed data takes 14 bytes.
pack("EGYPTIAN WEEKLY")

; GeneralMessage 2d05
; Packed data takes 15 bytes.
pack(THERE IS FOOD HERE.)

; GeneralMessage 2d14
; Packed data takes 9 bytes.
pack(TASTY FOOD)

; GeneralMessage 2d1d
; Packed data takes 18 bytes.
pack(THERE IS A BOTTLE HERE.)

; GeneralMessage 2d2f
; Packed data takes 10 bytes.
pack(SMALL BOTTLE)

; GeneralMessage 2d39
; Packed data takes 22 bytes.
pack(THERE IS WATER IN THE BOTTLE.)

; GeneralMessage 2d4f
; Packed data takes 15 bytes.
pack(WATER IN THE BOTTLE)

; GeneralMessage 2d5e
; Packed data takes 44 bytes.
pack(THERE IS A TINY PLANT IN THE PIT, MURMURING "WATER, WATER, ...")

; GeneralMessage 2d8a
; Packed data takes 64 bytes.
pack(THERE IS A TWELVE FOOT BEAN STALK STRETCHING UP OUT OF THE PIT, BELLOWING "WATER... WATER...")

; GeneralMessage 2dca
; Packed data takes 48 bytes.
pack(THERE IS A GIGANTIC BEAN STALK STRETCHING ALL THE WAY UP TO THE HOLE.)

; GeneralMessage 2dfa
; Packed data takes 79 bytes.
pack(THERE IS A MASSIVE VENDING MACHINE HERE. THE INSTRUCTIONS ON IT READ- "DROP COINS HERE TO RECIEVE FRESH BATTERIES".)

; GeneralMessage 2e49
; Packed data takes 23 bytes.
pack(THERE ARE FRESH BATTERIES HERE.)

; GeneralMessage 2e60
; Packed data takes 8 bytes.
pack(BATTERIES)

; GeneralMessage 2e68
; Packed data takes 36 bytes.
pack(SOME WORN-OUT BATTERIES HAVE BEEN DISCARDED NEARBY.)

; GeneralMessage 2e8c
; Packed data takes 8 bytes.
pack(BATTERIES)

; GeneralMessage 2e94
; Packed data takes 34 bytes.
pack(THERE IS A LARGE SPARKLING NUGGET OF GOLD HERE!)

; GeneralMessage 2eb6
; Packed data takes 14 bytes.
pack(LARGE GOLD NUGGET)

; GeneralMessage 2ec4
; Packed data takes 18 bytes.
pack(THERE ARE DIAMONDS HERE!)

; GeneralMessage 2ed6
; Packed data takes 13 bytes.
pack(SEVERAL DIAMONDS)

; GeneralMessage 2ee3
; Packed data takes 22 bytes.
pack(THERE ARE BARS OF SILVER HERE!)

; GeneralMessage 2ef9
; Packed data takes 10 bytes.
pack(SILVER BARS)

; GeneralMessage 2f03
; Packed data takes 23 bytes.
pack(THERE IS PRECIOUS JEWELRY HERE!)

; GeneralMessage 2f1a
; Packed data takes 13 bytes.
pack(PRECIOUS JEWELRY)

; GeneralMessage 2f27
; Packed data takes 20 bytes.
pack(THERE ARE MANY COINS HERE!)

; GeneralMessage 2f3b
; Packed data takes 9 bytes.
pack(RARE COINS)

; GeneralMessage 2f44
; Packed data takes 27 bytes.
pack(THE PHARAOH'S TREASURE CHEST IS HERE!)

; GeneralMessage 2f5f
; Packed data takes 12 bytes.
pack(TREASURE CHEST)

; GeneralMessage 2f6b
; Packed data takes 34 bytes.
pack(THERE IS A LARGE NEST HERE, FULL OF GOLDEN EGGS!)

; GeneralMessage 2f8d
; Packed data takes 10 bytes.
pack(GOLDEN EGGS)

; GeneralMessage 2f97
; Packed data takes 26 bytes.
pack(THERE IS A JEWEL-ENCRUSTED KEY HERE!)

; GeneralMessage 2fb1
; Packed data takes 10 bytes.
pack(JEWELED KEY)

; GeneralMessage 2fbb
; Packed data takes 30 bytes.
pack(THERE IS A DELICATE, PRECIOUS, VASE HERE!)

; GeneralMessage 2fd9
; Packed data takes 5 bytes.
pack(VASE)

; GeneralMessage 2fde
; Packed data takes 40 bytes.
pack(THE VASE IS NOW RESTING, DELICATELY, ON A VELVET PILLOW.)

; GeneralMessage 3006
; Packed data takes 39 bytes.
pack(THE FLOOR IS LITTERED WITH WORTHLESS SHARDS OF POTTERY.)

; GeneralMessage 302d
; Packed data takes 37 bytes.
pack(THERE IS AN EMERALD HERE THE SIZE OF A PLOVER'S EGG!)

; GeneralMessage 3052
; Packed data takes 14 bytes.
pack(EGG-SIZED EMERALD)

; GeneralMessage 3060
; Packed data takes 29 bytes.
pack(OFF TO ONE SIDE LIES A GLISTENING PEARL!)

; GeneralMessage 307d
; Packed data takes 13 bytes.
pack(GLISTENING PEARL)

; GeneralMessage 308a
; Packed data takes 37 bytes.
pack(YOU ARE AT THE BOTTOM OF THE PIT WITH A BROKEN NECK.)

; GeneralMessage 30af
; Packed data takes 32 bytes.
pack(THE CRACK IS FAR TOO SMALL FOR YOU TO FOLLOW.)

; GeneralMessage 30cf
; Packed data takes 18 bytes.
pack(THE DOME IS UNCLIMBABLE.)

; GeneralMessage 30e1
; Packed data takes 47 bytes.
pack(I RESPECTFULLY SUGGEST YOU GO ACROSS THE BRIDGE INSTEAD OF JUMPING.)

; GeneralMessage 3110
; Packed data takes 15 bytes.
pack(YOU DIDN'T MAKE IT.)

; GeneralMessage 311f
; Packed data takes 30 bytes.
pack(THERE IS NO WAY ACROSS THE BOTTOMLESS PIT.)

; GeneralMessage 313d
; Packed data takes 22 bytes.
pack(YOU CAN'T GET BY THE SERPENT.)

; GeneralMessage 3153
; Packed data takes 63 bytes.
pack(YOU HAVE CRAWLED THROUGH A VERY LOW WIDE PASSAGE PARALLEL TO AND NORTH OF THE HALL OF GODS.)

; GeneralMessage 3192
; Packed data takes 26 bytes.
pack(YOU DON'T FIT THROUGH TWO-INCH SLIT!)

; GeneralMessage 31ac
; Packed data takes 58 bytes.
pack(YOU HAVE CRAWLED AROUND IN SOME LITTLE HOLES AND WOUND UP BACK IN THE MAIN PASSAGE.)

; GeneralMessage 31e6
; Packed data takes 87 bytes.
pack(YOU HAVE CRAWLED AROUND IN SOME LITTLE HOLES AND FOUND YOUR WAY BLOCKED BY A FALLEN SLAB. YOU ARE NOW BACK IN THE MAIN PASSAGE.)

; GeneralMessage 323d
; Packed data takes 44 bytes.
pack(YOU CAN'T FIT THIS BIG SARCOPHAGUS THROUGH THAT LITTLE PASSAGE!)

; GeneralMessage 3269
; Packed data takes 76 bytes.
pack(SOMETHING YOU'RE CARRYING WON'T FIT THROUGH THE TUNNEL WITH YOU. YOU'D BEST TAKE INVENTORY AND DROP SOMETHING.)

; GeneralMessage 32b5
; Packed data takes 45 bytes.
pack(YOU CLAMBER UP THE PLANT AND SCURRY THROUGH THE HOLE AT THE TOP.)

; GeneralMessage 32e2
; Packed data takes 34 bytes.
pack(YOU'VE CLIMBED UP THE PLANT AND OUT OF THE PIT.)

; GeneralMessage 3304
; Packed data takes 32 bytes.
pack(THERE IS NO WAY FOR YOU TO GO THAT DIRECTION.)

; GeneralMessage 3324
; Packed data takes 36 bytes.
pack(I DON'T KNOW IN FROM OUT HERE. USE COMPASS POINTS.)

; GeneralMessage 3348
; Packed data takes 36 bytes.
pack(I AM UNSURE HOW YOU ARE FACING. USE COMPASS POINTS.)

; GeneralMessage 336c
; Packed data takes 13 bytes.
pack(NOTHING HAPPENS.)

; GeneralMessage 3379
; Packed data takes 14 bytes.
pack(I DON'T KNOW HOW.)

; GeneralMessage 3387
; Packed data takes 30 bytes.
pack(I DON'T KNOW HOW TO APPLY THAT WORD HERE.)

; GeneralMessage 33a5
; Packed data takes 16 bytes.
pack(YOUR LAMP IS NOW ON.)

; GeneralMessage 33b5
; Packed data takes 21 bytes.
pack(YOU HAVE NO SOURCE OF LIGHT.)

; GeneralMessage 33ca
; Packed data takes 16 bytes.
pack(YOUR LAMP IS NOW OFF.)

; GeneralMessage 33da
; Packed data takes 4 bytes.
pack(OK )

; GeneralMessage 33de
; Packed data takes 45 bytes.
pack(SORRY, BUT I NO LONGER SEEM TO REMEMBER HOW IT WAS YOU GOT HERE.)

; GeneralMessage 340b
; Packed data takes 21 bytes.
pack(YOU ARE ALREADY CARRYING IT.)

; GeneralMessage 3420
; Packed data takes 47 bytes.
pack(YOU CAN'T CARRY ANYTHING MORE. YOU'LL HAVE TO DROP SOMETHING FIRST.)

; GeneralMessage 344f
; Packed data takes 22 bytes.
pack(YOU'RE NOT CARRYING ANYTHING.)

; GeneralMessage 3465
; Packed data takes 29 bytes.
pack(YOU ARE CURRENTLY HOLDING THE FOLLOWING:)

; GeneralMessage 3482
; Packed data takes 16 bytes.
pack(DON'T BE RIDICULOUS!)

; GeneralMessage 3492
; Packed data takes 31 bytes.
pack(YOUR BOTTLE IS EMPTY AND THE GROUND IS WET.)

; GeneralMessage 34b1
; Packed data takes 16 bytes.
pack(YOU CAN'T POUR THAT.)

; GeneralMessage 34c1
; Packed data takes 62 bytes.
pack(RUBBING THE ELECTRIC LAMP IS NOT PARTICULARLY REWARDING. ANYWAY, NOTHING EXCITING HAPPENS.)

; GeneralMessage 34ff
; Packed data takes 27 bytes.
pack(PECULIAR. NOTHING UNEXPECTED HAPPENS.)

; GeneralMessage 351a
; Packed data takes 37 bytes.
pack(THERE IS NOTHING HERE WITH WHICH TO FILL THE BOTTLE.)

; GeneralMessage 353f
; Packed data takes 18 bytes.
pack(THE BOTTLE IS NOW EMPTY.)

; GeneralMessage 3551
; Packed data takes 16 bytes.
pack(YOU CAN'T FILL THAT.)

; GeneralMessage 3561
; Packed data takes 67 bytes.
pack(A GLISTENING PEARL FALLS OUT OF THE SARCOPHAGUS AND ROLLS AWAY. THE SARCOPHAGUS SNAPS SHUT AGAIN.)

; GeneralMessage 35a4
; Packed data takes 44 bytes.
pack(I'D ADVISE YOU TO PUT DOWN THE SARCOPHAGUS BEFORE OPENING IT!!)

; GeneralMessage 35d0
; Packed data takes 58 bytes.
pack(THE SARCOPHAGUS CREAKS OPEN, REVEALING NOTHING INSIDE. IT PROMPTLY SNAPS SHUT AGAIN.)

; GeneralMessage 360a
; Packed data takes 44 bytes.
pack(YOU DON'T HAVE ANYTHING STRONG ENOUGH TO OPEN THE SARCOPHAGUS.)

; GeneralMessage 3636
; Packed data takes 34 bytes.
pack(I DON'T KNOW HOW TO LOCK OR UNLOCK SUCH A THING.)

; GeneralMessage 3658
; Packed data takes 35 bytes.
pack(THE BIRD STATUE IS NOW DEAD. ITS BODY DISAPPEARS.)

; GeneralMessage 367b
; Packed data takes 38 bytes.
pack(THE STONE IS VERY STRONG AND IS IMPERVIOUS TO ATTACK.)

; GeneralMessage 36a1
; Packed data takes 44 bytes.
pack(ATTACKING THE SERPENT BOTH DOESN'T WORK AND IS VERY DANGEROUS.)

; GeneralMessage 36cd
; Packed data takes 16 bytes.
pack(YOU CAN'T BE SERIOUS!)

; GeneralMessage 36dd
; Packed data takes 26 bytes.
pack(IT IS BEYOND YOUR POWER TO DO THAT.)

; GeneralMessage 36f7
; Packed data takes 21 bytes.
pack(THANK YOU, IT WAS DELICIOUS!)

; GeneralMessage 370c
; Packed data takes 24 bytes.
pack(I THINK I JUST LOST MY APPETITE.)

; GeneralMessage 3724
; Packed data takes 84 bytes.
pack(YOU HAVE TAKEN A DRINK FROM THE STREAM. THE WATER TASTES STRONGLY OF MINERALS, BUT IS NOT UNPLEASANT. IT IS EXTREMELY COLD.)

; GeneralMessage 3778
; Packed data takes 34 bytes.
pack(IT'S NOT HUNGRY. BESIDES, YOU HAVE NO BIRD SEED.)

; GeneralMessage 379a
; Packed data takes 39 bytes.
pack(YOU FELL INTO A PIT AND BROKE EVERY BONE IN YOUR BODY. )

; GeneralMessage 37c1
; Packed data takes 33 bytes.
pack(THE SERPENT HAS NOW DEVOURED YOUR BIRD STATUE.)

; GeneralMessage 37e2
; Packed data takes 42 bytes.
pack(THERE IS NOTHING HERE IT WANTS TO EAT - EXCEPT PERHAPS YOU.)

; GeneralMessage 380c
; Packed data takes 49 bytes.
pack(IT IS NOW PITCH DARK. IF YOU PROCEED, YOU WILL LIKELY FALL INTO A PIT.)

; GeneralMessage 383d
; Packed data takes 29 bytes.
pack(I'M GAME. WOULD YOU CARE TO EXPLAIN HOW?)

; GeneralMessage 385a
; Packed data takes 126 bytes.
pack(YOUR LAMP IS GETTING DIM. YOU'D BEST START WRAPPING THIS UP, UNLESS YOU CAN FIND SOME FRESH BATTERIES. I SEEM TO RECALL THERE IS A VENDING MACHINE IN THE MAZE. BRING SOME COINS WITH YOU.)

; GeneralMessage 38d8
; Packed data takes 23 bytes.
pack(YOUR LAMP HAS RUN OUT OF POWER.)

; GeneralMessage 38ef
; Packed data takes 46 bytes.
pack(THE PLANT HAS EXCEPTIONALLY DEEP ROOTS AND CANNOT BE PULLED FREE.)

; GeneralMessage 391d
; Packed data takes 53 bytes.
pack(YOUR LAMP IS GETTING DIM. I'M TAKING THE LIBERTY OF REPLACING THE BATTERIES.)

; GeneralMessage 3952
; Packed data takes 76 bytes.
pack(AS YOU APPROACH THE STATUE, IT COMES TO LIFE AND FLIES ACROSS THE CHAMBER WHERE IT LANDS AND RETURNS TO STONE.)

; GeneralMessage 399e
; Packed data takes 35 bytes.
pack(YOU CAN LIFT THE STATUE, BUT YOU CANNOT CARRY IT.)

; GeneralMessage 39c1
; Packed data takes 21 bytes.
pack(YOUR BOTTLE IS ALREADY FULL.)

; GeneralMessage 39d6
; Packed data takes 136 bytes.
pack(SUDDENLY, A MUMMY CREEPS UP BEHIND YOU!! "I'M THE KEEPER OF THE TOMB", HE WAILS, "I TAKE THESE TREASURES AND PUT THEM IN THE CHEST DEEP IN THE MAZE!" HE GRABS YOUR TREASURE AND VANISHES INTO THE GLOOM.)

; GeneralMessage 3a5e
; Packed data takes 23 bytes.
pack(THE STONE BRIDGE HAS RETRACTED!)

; GeneralMessage 3a75
; Packed data takes 32 bytes.
pack(A STONE BRIDGE NOW SPANS THE BOTTOMLESS PIT.)

; GeneralMessage 3a95
; Packed data takes 40 bytes.
pack(THE VASE IS NOW RESTING, DELICATELY, ON A VELVET PILLOW.)

; GeneralMessage 3abd
; Packed data takes 27 bytes.
pack(THE VASE DROPS WITH A DELICATE CRASH.)

; GeneralMessage 3ad8
; Packed data takes 29 bytes.
pack(THERE ARE NOW SOME FRESH BATTERIES HERE.)

; GeneralMessage 3af5
; Packed data takes 44 bytes.
pack(YOU HAVE TAKEN THE VASE AND HURLED IT DELICATELY TO THE GROUND.)

; GeneralMessage 3b21
; Packed data takes 97 bytes.
pack(THE BIRD STATUE COMES TO LIFE AND ATTACKS THE SERPENT AND IN AN ASTOUNDING FLURRY, DRIVES THE SERPENT AWAY. THE BIRD TURNS BACK INTO A STATUE.)

; GeneralMessage 3b82
; Packed data takes 39 bytes.
pack(THE PLANT SPURTS INTO FURIOUS GROWTH FOR A FEW SECONDS.)

; GeneralMessage 3ba9
; Packed data takes 46 bytes.
pack(THE PLANT GROWS EXPLOSIVELY, ALMOST FILLING THE BOTTOM OF THE PIT.)

; GeneralMessage 3bd7
; Packed data takes 36 bytes.
pack(YOU'VE OVER-WATERED THE PLANT! IT'S SHRIVELING UP!)

; GeneralMessage 3bfb
; Packed data takes 44 bytes.
pack(THERE IS NOTHING HERE TO CLIMB. USE UP OR OUT TO LEAVE THE PIT.)

; GeneralMessage 3c27
; Packed data takes 12 bytes.
pack(READY CASSETTE)

; GeneralMessage 3c33
; Packed data takes 12 bytes.
pack(CHECKSUM ERROR)


L3C3F:  
   
    .DB   0

; User words
; AABBBCCC
;
; AA = Grammar
;      0 = Noun
;      1 = Verb (and needs noun in pack)
;      2 = Verb (and needs noun in pack or room)
;      3 = Verb (stand alone)

; BBB = number of bytes in token data
; CCC = number of bytes in token text
;
; Object words
; A single name can refer to several objects. The object data is
; the search order for finding objects in the pack or room. For 
; instance, the LAMP refers to:
;   1) 0x0E unlit lamp
;   2) 0x0F lit lamp
;   3) 0x2C lamp
;                              ; Object NUMBER (many have multiple)
    .DB   4+3*8+0*64,"LAMP"    ,0xe,0xf,0x2c
    .DB   6+3*8+0*64,"LANTER"  ,0xe,0xf,0x2c
    .DB   3+1*8+0*64,"BOX"     ,0x10
    .DB   7+1*8+0*64,"SCEPTER" ,0x11
    .DB   4+2*8+0*64,"BIRD"    ,0x13,0x14
    .DB   6+2*8+0*64,"STATUE"  ,0x13,0x14
    .DB   6+1*8+0*64,"PILLOW"  ,0x12
    .DB   6+1*8+0*64,"VELVET"  ,0x12
    .DB   6+1*8+0*64,"SERPEN"  ,0xb
    .DB   6+2*8+0*64,"SARCOP"  ,0x17,0x18
    .DB   6+1*8+0*64,"MAGAZI"  ,0x19
    .DB   5+1*8+0*64,"ISSUE"   ,0x19
    .DB   6+1*8+0*64,"EGYPTI"  ,0x19
    .DB   4+1*8+0*64,"FOOD"    ,0x1a
    .DB   6+1*8+0*64,"BOTTLE"  ,0x1b
    .DB   5+2*8+0*64,"WATER"   ,0x1c,0x1e
    .DB   5+3*8+0*64,"PLANT"   ,0x7,0x8,0x9
    .DB   6+3*8+0*64,"BEANST"  ,0x7,0x8,0x9
    .DB   6+1*8+0*64,"MACHIN"  ,0x6
    .DB   6+1*8+0*64,"VENDIN"  ,0x6
    .DB   6+2*8+0*64,"BATTER"  ,0x23,0x24
    .DB   4+1*8+0*64,"GOLD"    ,0x25
    .DB   6+1*8+0*64,"NUGGET"  ,0x25
    .DB   6+1*8+0*64,"DIAMON"  ,0x26
    .DB   6+1*8+0*64,"SILVER"  ,0x27
    .DB   4+1*8+0*64,"BARS"    ,0x27
    .DB   6+1*8+0*64,"JEWELR"  ,0x28
    .DB   5+1*8+0*64,"COINS"   ,0x29
    .DB   5+1*8+0*64,"CHEST"   ,0x2a
    .DB   6+1*8+0*64,"TREASU"  ,0x2a
    .DB   4+1*8+0*64,"EGGS"    ,0x2b
    .DB   3+1*8+0*64,"EGG"     ,0x2b
    .DB   4+1*8+0*64,"NEST"    ,0x2b
    .DB   3+1*8+0*64,"KEY"     ,0x22
    .DB   4+2*8+0*64,"VASE"    ,0x20,0x21
    .DB   6+1*8+0*64,"SHARDS"  ,0x15
    .DB   6+1*8+0*64,"POTTER"  ,0x15
    .DB   6+1*8+0*64,"EMERAL"  ,0x1f
    .DB   5+1*8+0*64,"PEARL"   ,0x16
;
; Action command words
;
    .DB   1+1*8+3*64,"N"       ,0x1
    .DB   5+1*8+3*64,"NORTH"   ,0x1
    .DB   1+1*8+3*64,"E"       ,0x2
    .DB   4+1*8+3*64,"EAST"    ,0x2
    .DB   1+1*8+3*64,"S"       ,0x3
    .DB   5+1*8+3*64,"SOUTH"   ,0x3
    .DB   1+1*8+3*64,"W"       ,0x4
    .DB   4+1*8+3*64,"WEST"    ,0x4
    .DB   2+1*8+3*64,"NE"      ,0x5
    .DB   6+1*8+3*64,"NORTHE"  ,0x5
    .DB   2+1*8+3*64,"SE"      ,0x6
    .DB   6+1*8+3*64,"SOUTHE"  ,0x6
    .DB   2+1*8+3*64,"SW"      ,0x7
    .DB   6+1*8+3*64,"SOUTHW"  ,0x7
    .DB   2+1*8+3*64,"NW"      ,0x8
    .DB   6+1*8+3*64,"NORTHW"  ,0x8
    .DB   1+1*8+3*64,"U"       ,0x9
    .DB   2+1*8+3*64,"UP"      ,0x9
    .DB   1+1*8+3*64,"D"       ,0xa
    .DB   4+1*8+3*64,"DOWN"    ,0xa
    .DB   2+1*8+3*64,"IN"      ,0xb
    .DB   6+1*8+3*64,"INSIDE"  ,0xb
    .DB   3+1*8+3*64,"OUT"     ,0xc
    .DB   6+1*8+3*64,"OUTSID"  ,0xc
    .DB   5+1*8+3*64,"CROSS"   ,0xd
    .DB   4+1*8+3*64,"LEFT"    ,0xe
    .DB   5+1*8+3*64,"RIGHT"   ,0xf
    .DB   4+1*8+3*64,"JUMP"    ,0x10
    .DB   5+1*8+3*64,"CLIMB"   ,0x11
    .DB   5+1*8+3*64,"PANEL"   ,0x12
    .DB   4+1*8+3*64,"BACK"    ,0x14
    .DB   4+1*8+3*64,"SWIM"    ,0x16
    .DB   2+1*8+3*64,"ON"      ,0x17
    .DB   3+1*8+3*64,"OFF"     ,0x18
    .DB   4+1*8+3*64,"QUIT"    ,0x19
    .DB   4+1*8+3*64,"STOP"    ,0x19
    .DB   5+1*8+3*64,"SCORE"   ,0x1a
    .DB   6+1*8+3*64,"INVENT"  ,0x1b
    .DB   4+1*8+3*64,"LOOK"    ,0x1c
    .DB   4+1*8+ 1*64,"DROP"    ,0x21
    .DB   6+1*8+ 1*64,"RELEAS"  ,0x21
    .DB   4+1*8+ 1*64,"FREE"    ,0x21
    .DB   6+1*8+ 1*64,"DISCAR"  ,0x21
    .DB   5+1*8+3*64,"LIGHT"   ,0x17
    .DB   4+1*8+ 1*64,"WAVE"    ,0x23
    .DB   5+1*8+ 1*64,"SHAKE"   ,0x23
    .DB   5+1*8+ 1*64,"SWING"   ,0x23
    .DB   4+1*8+ 1*64,"POUR"    ,0x24
    .DB   3+1*8+ 1*64,"RUB"     ,0x25
    .DB   5+1*8+ 1*64,"THROW"   ,0x26
    .DB   4+1*8+ 1*64,"TOSS"    ,0x26
    .DB   4+1*8+ 1*64,"FILL"    ,0x27
    .DB   4+1*8+   2*64,"TAKE"    ,0x28
    .DB   3+1*8+   2*64,"GET"     ,0x28
    .DB   5+1*8+   2*64,"CARRY"   ,0x28
    .DB   5+1*8+   2*64,"CATCH"   ,0x28
    .DB   5+1*8+   2*64,"STEAL"   ,0x28
    .DB   6+1*8+   2*64,"CAPTUR"  ,0x28
    .DB   4+1*8+   2*64,"OPEN"    ,0x29
    .DB   6+1*8+   2*64,"ATTACK"  ,0x2c
    .DB   4+1*8+   2*64,"KILL"    ,0x2c
    .DB   3+1*8+   2*64,"HIT"     ,0x2c
    .DB   5+1*8+   2*64,"FIGHT"   ,0x2c
    .DB   4+1*8+   2*64,"FEED"    ,0x2d
    .DB   3+1*8+   2*64,"EAT"     ,0x2e
    .DB   5+1*8+   2*64,"DRINK"   ,0x2f
    .DB   5+1*8+   2*64,"BREAK"   ,0x30
    .DB   5+1*8+   2*64,"SMASH"   ,0x30
    .DB   4+1*8+3*64,"LOAD"    ,0x3a
    .DB   4+1*8+3*64,"SAVE"    ,0x3b
    .DB   5+1*8+3*64,"PLUGH"   ,0x39
    .DB   0

L3F16: 

    .DB   0x0D, 0x00, 0x02, 0x88, 0x88, 0x80, 0xFA, 0x00, 0x00, 0x4F, 0x88, 0x00 


